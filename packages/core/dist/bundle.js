!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("react"),require("@apollo/client"),require("sweetalert")):"function"==typeof define&&define.amd?define(["react","@apollo/client","sweetalert"],t):(e="undefined"!=typeof globalThis?globalThis:e||self).zeiqCore=t(e.React,e.apollo,e.sweetalert)}(this,(function(e,t,o){"use strict";function n(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var a=n(o),r={makeId:e=>{let t="";const o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",n=o.length;for(let a=0;a<e;a++)t+=o.charAt(Math.floor(Math.random()*n));return t},absoluteUrl:(e,t)=>{let o="https:",n=e?e.headers["x-forwarded-host"]||e.headers.host:window.location.host;return n.indexOf("localhost")>-1&&(t&&(n=t),o="http:"),{protocol:o,host:n,origin:`${o}//${n}`,url:e}}},s={getAppCookies:e=>{const t={};if(e.headers.cookie){e.headers.cookie.split("; ").forEach((e=>{const o=e.split("=");t[o[0]]=decodeURI(o[1])}))}return t}};const i=t.gql`
  mutation contact($input: ContactInput!) {
    contact(input: $input) {
      success
    }
  }
`;return{...r,...s,...{useSubmitContact:()=>{const[o,{data:n,error:r,loading:s}]=t.useMutation(i);e.useEffect((()=>{r&&a.default(r.message),n&&n.contact&&a.default("Message sent!")}),[r,n]);return[async e=>{console.log("useSubmitContact.js"),await o({variables:{input:e}})},{data:n,error:r,loading:s}]}}}}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyIuLi9zcmMvaGVscGVycy9pbmRleC5qcyIsIi4uL3NyYy9oZWxwZXJzL21ha2VJZC5qcyIsIi4uL3NyYy9oZWxwZXJzL2Fic29sdXRlVXJsLmpzIiwiLi4vc3JjL2F1dGgvaW5kZXguanMiLCIuLi9zcmMvYXV0aC9nZXRBcHBDb29raWVzLmpzIiwiLi4vc3JjL2hvb2tzL3VzZVN1Ym1pdENvbnRhY3QuanMiLCIuLi9zcmMvbWFpbi5qcyIsIi4uL3NyYy9ob29rcy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbWFrZUlkIGZyb20gJy4vbWFrZUlkJztcbmltcG9ydCBhYnNvbHV0ZVVybCBmcm9tICcuL2Fic29sdXRlVXJsJztcblxuZXhwb3J0IGRlZmF1bHQgeyBtYWtlSWQsIGFic29sdXRlVXJsIH07XG4iLCJleHBvcnQgZGVmYXVsdCAobGVuZ3RoKSA9PiB7XG4gIGxldCByZXN1bHQgPSAnJztcbiAgY29uc3QgY2hhcmFjdGVycyA9XG4gICAgJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5JztcbiAgY29uc3QgY2hhcmFjdGVyc0xlbmd0aCA9IGNoYXJhY3RlcnMubGVuZ3RoO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGx1c3BsdXNcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHJlc3VsdCArPSBjaGFyYWN0ZXJzLmNoYXJBdChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjaGFyYWN0ZXJzTGVuZ3RoKSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJleHBvcnQgZGVmYXVsdCAocmVxLCBzZXRMb2NhbGhvc3QpID0+IHtcbiAgbGV0IHByb3RvY29sID0gJ2h0dHBzOic7XG4gIGxldCBob3N0ID0gcmVxXG4gICAgPyByZXEuaGVhZGVyc1sneC1mb3J3YXJkZWQtaG9zdCddIHx8IHJlcS5oZWFkZXJzLmhvc3RcbiAgICA6IHdpbmRvdy5sb2NhdGlvbi5ob3N0O1xuICBpZiAoaG9zdC5pbmRleE9mKCdsb2NhbGhvc3QnKSA+IC0xKSB7XG4gICAgaWYgKHNldExvY2FsaG9zdCkgaG9zdCA9IHNldExvY2FsaG9zdDtcbiAgICBwcm90b2NvbCA9ICdodHRwOic7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBwcm90b2NvbCxcbiAgICBob3N0LFxuICAgIG9yaWdpbjogYCR7cHJvdG9jb2x9Ly8ke2hvc3R9YCxcbiAgICB1cmw6IHJlcSxcbiAgfTtcbn07XG4iLCJpbXBvcnQgZ2V0QXBwQ29va2llcyBmcm9tICcuL2dldEFwcENvb2tpZXMnO1xuXG5leHBvcnQgZGVmYXVsdCB7IGdldEFwcENvb2tpZXMgfTtcbiIsIi8qXG4gKiBAcGFyYW1zIHtyZXF1ZXN0fSBleHRyYWN0ZWQgZnJvbSByZXF1ZXN0IHJlc3BvbnNlXG4gKiBAcmV0dXJuIHtvYmplY3R9IG9iamVjdCBvZiBwYXJzZSBqd3QgY29va2llIGRlY29kZSBvYmplY3RcbiAqL1xuZXhwb3J0IGRlZmF1bHQgKHJlcSkgPT4ge1xuICBjb25zdCBwYXJzZWRJdGVtcyA9IHt9O1xuICBpZiAocmVxLmhlYWRlcnMuY29va2llKSB7XG4gICAgY29uc3QgY29va2llc0l0ZW1zID0gcmVxLmhlYWRlcnMuY29va2llLnNwbGl0KCc7ICcpO1xuICAgIGNvb2tpZXNJdGVtcy5mb3JFYWNoKChjb29raWVzKSA9PiB7XG4gICAgICBjb25zdCBwYXJzZWRJdGVtID0gY29va2llcy5zcGxpdCgnPScpO1xuICAgICAgcGFyc2VkSXRlbXNbcGFyc2VkSXRlbVswXV0gPSBkZWNvZGVVUkkocGFyc2VkSXRlbVsxXSk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHBhcnNlZEl0ZW1zO1xufTtcbiIsImltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdxbCwgdXNlTXV0YXRpb24gfSBmcm9tICdAYXBvbGxvL2NsaWVudCc7XG5pbXBvcnQgc3dhbCBmcm9tICdzd2VldGFsZXJ0JztcblxuY29uc3QgbXV0YXRpb24gPSBncWxgXG4gIG11dGF0aW9uIGNvbnRhY3QoJGlucHV0OiBDb250YWN0SW5wdXQhKSB7XG4gICAgY29udGFjdChpbnB1dDogJGlucHV0KSB7XG4gICAgICBzdWNjZXNzXG4gICAgfVxuICB9XG5gO1xuXG5jb25zdCB1c2VTdWJtaXRDb250YWN0ID0gKCkgPT4ge1xuICBjb25zdCBbZXhlY3V0ZSwgeyBkYXRhLCBlcnJvciwgbG9hZGluZyB9XSA9IHVzZU11dGF0aW9uKG11dGF0aW9uKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChlcnJvcikge1xuICAgICAgc3dhbChlcnJvci5tZXNzYWdlKTtcbiAgICB9XG4gICAgaWYgKGRhdGEgJiYgZGF0YS5jb250YWN0KSB7XG4gICAgICBzd2FsKCdNZXNzYWdlIHNlbnQhJyk7XG4gICAgfVxuICB9LCBbZXJyb3IsIGRhdGFdKTtcblxuICBjb25zdCBoYW5kbGVTdWJtaXQgPSBhc3luYyAodmFsdWVzKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ3VzZVN1Ym1pdENvbnRhY3QuanMnKTtcbiAgICBhd2FpdCBleGVjdXRlKHsgdmFyaWFibGVzOiB7IGlucHV0OiB2YWx1ZXMgfSB9KTtcbiAgfTtcblxuICByZXR1cm4gW2hhbmRsZVN1Ym1pdCwgeyBkYXRhLCBlcnJvciwgbG9hZGluZyB9XTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVzZVN1Ym1pdENvbnRhY3Q7XG4iLCJpbXBvcnQgaGVscGVycyBmcm9tICcuL2hlbHBlcnMnO1xuaW1wb3J0IGxpYnMgZnJvbSAnLi9saWJzJztcbmltcG9ydCBhdXRoIGZyb20gJy4vYXV0aCc7XG5pbXBvcnQgaG9va3MgZnJvbSAnLi9ob29rcyc7XG5cbi8vIGV4cG9ydCBjb25zdCBIZWxwZXJzID0gaGVscGVycztcbi8vIGV4cG9ydCBjb25zdCBMaWJzID0gbGlicztcbi8vIGV4cG9ydCBjb25zdCBBdXRoID0gYXV0aDtcblxuZXhwb3J0IGRlZmF1bHQgeyAuLi5oZWxwZXJzLCAuLi5saWJzLCAuLi5hdXRoLCAuLi5ob29rcyB9O1xuIiwiaW1wb3J0IHVzZVN1Ym1pdENvbnRhY3QgZnJvbSAnLi91c2VTdWJtaXRDb250YWN0JztcblxuZXhwb3J0IGRlZmF1bHQgeyB1c2VTdWJtaXRDb250YWN0IH07XG4iXSwibmFtZXMiOlsibWFrZUlkIiwibGVuZ3RoIiwicmVzdWx0IiwiY2hhcmFjdGVycyIsImNoYXJhY3RlcnNMZW5ndGgiLCJpIiwiY2hhckF0IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiYWJzb2x1dGVVcmwiLCJyZXEiLCJzZXRMb2NhbGhvc3QiLCJwcm90b2NvbCIsImhvc3QiLCJoZWFkZXJzIiwid2luZG93IiwibG9jYXRpb24iLCJpbmRleE9mIiwib3JpZ2luIiwidXJsIiwiZ2V0QXBwQ29va2llcyIsInBhcnNlZEl0ZW1zIiwiY29va2llIiwic3BsaXQiLCJmb3JFYWNoIiwiY29va2llcyIsInBhcnNlZEl0ZW0iLCJkZWNvZGVVUkkiLCJtdXRhdGlvbiIsImdxbCIsImhlbHBlcnMiLCJhdXRoIiwidXNlU3VibWl0Q29udGFjdCIsImV4ZWN1dGUiLCJkYXRhIiwiZXJyb3IiLCJsb2FkaW5nIiwidXNlTXV0YXRpb24iLCJ1c2VFZmZlY3QiLCJzd2FsIiwibWVzc2FnZSIsImNvbnRhY3QiLCJhc3luYyIsImNvbnNvbGUiLCJsb2ciLCJ2YXJpYWJsZXMiLCJpbnB1dCIsInZhbHVlcyJdLCJtYXBwaW5ncyI6IndjQUdlLENBQUVBLE9DSERDLFFBQ1ZDLEVBQVMsU0FDUEMsRUFDSixpRUFDSUMsRUFBbUJELEVBQVdGLFdBRS9CLElBQUlJLEVBQUksRUFBR0EsRUFBSUosRUFBUUksSUFDMUJILEdBQVVDLEVBQVdHLE9BQU9DLEtBQUtDLE1BQU1ELEtBQUtFLFNBQVdMLFdBRWxERixHRE5nQlEsYUVIVEMsRUFBS0MsU0FDZkMsRUFBVyxTQUNYQyxFQUFPSCxFQUNQQSxFQUFJSSxRQUFRLHFCQUF1QkosRUFBSUksUUFBUUQsS0FDL0NFLE9BQU9DLFNBQVNILFlBQ2hCQSxFQUFLSSxRQUFRLGNBQWdCLElBQzNCTixJQUFjRSxFQUFPRixHQUN6QkMsRUFBVyxTQUVOLENBQ0xBLFNBQUFBLEVBQ0FDLEtBQUFBLEVBQ0FLLE9BQVMsR0FBRU4sTUFBYUMsSUFDeEJNLElBQUtULE9DWE0sQ0FBRVUsY0NFRFYsVUFDUlcsRUFBYyxNQUNoQlgsRUFBSUksUUFBUVEsT0FBUSxDQUNEWixFQUFJSSxRQUFRUSxPQUFPQyxNQUFNLE1BQ2pDQyxTQUFTQyxVQUNkQyxFQUFhRCxFQUFRRixNQUFNLEtBQ2pDRixFQUFZSyxFQUFXLElBQU1DLFVBQVVELEVBQVcsY0FHL0NMLElDVFQsTUFBTU8sRUFBV0MsS0FBSTs7Ozs7O1FDS04sSUFBS0MsS0FBcUJDLEtDUDFCLENBQUVDLGlCRlVRLFdBQ2hCQyxHQUFTQyxLQUFFQSxFQUFGQyxNQUFRQSxFQUFSQyxRQUFlQSxJQUFhQyxjQUFZVCxHQUV4RFUsYUFBVSxLQUNKSCxHQUNGSSxVQUFLSixFQUFNSyxTQUVUTixHQUFRQSxFQUFLTyxTQUNmRixVQUFLLG1CQUVOLENBQUNKLEVBQU9ELFVBT0osQ0FMY1EsTUFBQUEsSUFDbkJDLFFBQVFDLElBQUksNkJBQ05YLEVBQVEsQ0FBRVksVUFBVyxDQUFFQyxNQUFPQyxNQUdoQixDQUFFYixLQUFBQSxFQUFNQyxNQUFBQSxFQUFPQyxRQUFBQSJ9
