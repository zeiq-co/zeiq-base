!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("react"),require("graphql"),require("sweetalert")):"function"==typeof define&&define.amd?define(["react","graphql","sweetalert"],t):(e="undefined"!=typeof globalThis?globalThis:e||self).zeiqCore=t(e.React,e.graphql,e.sweetalert)}(this,(function(e,t,r){"use strict";function n(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var i=n(e),o=n(r),a={makeId:e=>{let t="";const r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",n=r.length;for(let i=0;i<e;i++)t+=r.charAt(Math.floor(Math.random()*n));return t},absoluteUrl:(e,t)=>{let r="https:",n=e?e.headers["x-forwarded-host"]||e.headers.host:window.location.host;return n.indexOf("localhost")>-1&&(t&&(n=t),r="http:"),{protocol:r,host:n,origin:`${r}//${n}`,url:e}}};const s=i.default.createContext();var u={ZeiqThemeProvider:({children:e,value:t})=>i.default.createElement(s.Provider,{value:t},e)},c={getAppCookies:e=>{const t={};if(e.headers.cookie){e.headers.cookie.split("; ").forEach((e=>{const r=e.split("=");t[r[0]]=decodeURI(r[1])}))}return t}},l=function(e,t){return(l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)};function f(e,t){function r(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}var p=function(){return(p=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};function h(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(n=Object.getOwnPropertySymbols(e);i<n.length;i++)t.indexOf(n[i])<0&&Object.prototype.propertyIsEnumerable.call(e,n[i])&&(r[n[i]]=e[n[i]])}return r}function d(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;var n=Array(e),i=0;for(t=0;t<r;t++)for(var o=arguments[t],a=0,s=o.length;a<s;a++,i++)n[i]=o[a];return n}
/*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */var y=function(e,t){return(y=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)};var v="Invariant Violation",b=Object.setPrototypeOf,g=void 0===b?function(e,t){return e.__proto__=t,e}:b,m=function(e){function t(r){void 0===r&&(r=v);var n=e.call(this,"number"==typeof r?v+": "+r+" (see https://github.com/apollographql/invariant-packages)":r)||this;return n.framesToPop=1,n.name=v,g(n,t.prototype),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}y(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}(t,e),t}(Error);function w(e,t){if(!e)throw new m(t)}var O=["log","warn","error","silent"],S=O.indexOf("log");function k(e){return function(){if(O.indexOf(e)>=S)return console[e].apply(console,arguments)}}function x(e,t){var r=e.directives;return!r||!r.length||function(e){var t=[];e&&e.length&&e.forEach((function(e){if(function(e){var t=e.name.value;return"skip"===t||"include"===t}(e)){var r=e.arguments,n=e.name.value;w(r&&1===r.length,"Incorrect number of arguments for the @"+n+" directive.");var i=r[0];w(i.name&&"if"===i.name.value,"Invalid argument for the @"+n+" directive.");var o=i.value;w(o&&("Variable"===o.kind||"BooleanValue"===o.kind),"Argument for the @"+n+" directive must be a variable or a boolean value."),t.push({directive:e,ifArgument:i})}}));return t}(r).every((function(e){var r=e.directive,n=e.ifArgument,i=!1;return"Variable"===n.value.kind?w(void 0!==(i=t&&t[n.value.name.value]),"Invalid variable referenced in @"+r.name.value+" directive."):i=n.value.value,"skip"===r.name.value?!i:i}))}function E(e,r){return function(e){var r=[];return t.visit(e,{Directive:function(e){r.push(e.name.value)}}),r}(r).some((function(t){return e.indexOf(t)>-1}))}function j(e,t){var r=t,n=[];return e.definitions.forEach((function(e){if("OperationDefinition"===e.kind)throw new m("Found a "+e.operation+" operation"+(e.name?" named '"+e.name.value+"'":"")+". No operations are allowed when using a fragment as a query. Only fragments are allowed.");"FragmentDefinition"===e.kind&&n.push(e)})),void 0===r&&(w(1===n.length,"Found "+n.length+" fragments. `fragmentName` must be provided when there is not exactly 1 fragment."),r=n[0].name.value),p(p({},e),{definitions:d([{kind:"OperationDefinition",operation:"query",selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:r}}]}}],e.definitions)})}function _(e){void 0===e&&(e=[]);var t={};return e.forEach((function(e){t[e.name.value]=e})),t}function R(e,t){switch(e.kind){case"InlineFragment":return e;case"FragmentSpread":var r=t&&t[e.name.value];return w(r,"No fragment named "+e.name.value+"."),r;default:return null}}!function(e){e.log=k("log"),e.warn=k("warn"),e.error=k("error")}(w||(w={})),"object"!=typeof process||"object"!=typeof process.env||process;function M(e){return{__ref:String(e)}}function q(e){return Boolean(e&&"object"==typeof e&&"string"==typeof e.__ref)}function T(e,t,r,n){if(function(e){return"IntValue"===e.kind}(r)||function(e){return"FloatValue"===e.kind}(r))e[t.value]=Number(r.value);else if(function(e){return"BooleanValue"===e.kind}(r)||function(e){return"StringValue"===e.kind}(r))e[t.value]=r.value;else if(function(e){return"ObjectValue"===e.kind}(r)){var i={};r.fields.map((function(e){return T(i,e.name,e.value,n)})),e[t.value]=i}else if(function(e){return"Variable"===e.kind}(r)){var o=(n||{})[r.name.value];e[t.value]=o}else if(function(e){return"ListValue"===e.kind}(r))e[t.value]=r.values.map((function(e){var r={};return T(r,t,e,n),r[t.value]}));else if(function(e){return"EnumValue"===e.kind}(r))e[t.value]=r.value;else{if(!function(e){return"NullValue"===e.kind}(r))throw new m('The inline argument "'+t.value+'" of kind "'+r.kind+'"is not supported. Use variables instead of inline arguments to overcome this limitation.');e[t.value]=null}}var P=["connection","include","skip","client","rest","export"];function C(e,t,r){if(t&&r&&r.connection&&r.connection.key){if(r.connection.filter&&r.connection.filter.length>0){var n=r.connection.filter?r.connection.filter:[];n.sort();var i={};return n.forEach((function(e){i[e]=t[e]})),r.connection.key+"("+JSON.stringify(i)+")"}return r.connection.key}var o=e;if(t){var a=function(e,t){t||(t={}),"function"==typeof t&&(t={cmp:t});var r,n="boolean"==typeof t.cycles&&t.cycles,i=t.cmp&&(r=t.cmp,function(e){return function(t,n){var i={key:t,value:e[t]},o={key:n,value:e[n]};return r(i,o)}}),o=[];return function e(t){if(t&&t.toJSON&&"function"==typeof t.toJSON&&(t=t.toJSON()),void 0!==t){if("number"==typeof t)return isFinite(t)?""+t:"null";if("object"!=typeof t)return JSON.stringify(t);var r,a;if(Array.isArray(t)){for(a="[",r=0;r<t.length;r++)r&&(a+=","),a+=e(t[r])||"null";return a+"]"}if(null===t)return"null";if(-1!==o.indexOf(t)){if(n)return JSON.stringify("__cycle__");throw new TypeError("Converting circular structure to JSON")}var s=o.push(t)-1,u=Object.keys(t).sort(i&&i(t));for(a="",r=0;r<u.length;r++){var c=u[r],l=e(t[c]);l&&(a&&(a+=","),a+=JSON.stringify(c)+":"+l)}return o.splice(s,1),"{"+a+"}"}}(e)}(t);o+="("+a+")"}return r&&Object.keys(r).forEach((function(e){-1===P.indexOf(e)&&(r[e]&&Object.keys(r[e]).length?o+="@"+e+"("+JSON.stringify(r[e])+")":o+="@"+e)})),o}function D(e){return e.alias?e.alias.value:e.name.value}function I(e,t,r){if("string"==typeof e.__typename)return e.__typename;for(var n=0,i=t.selections;n<i.length;n++){var o=i[n];if(F(o)){if("__typename"===o.name.value)return e[D(o)]}else{var a=I(e,R(o,r).selectionSet,r);if("string"==typeof a)return a}}}function F(e){return"Field"===e.kind}function A(e){w(e&&"Document"===e.kind,'Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a "gql" tag? http://docs.apollostack.com/apollo-client/core.html#gql');var t=e.definitions.filter((function(e){return"FragmentDefinition"!==e.kind})).map((function(e){if("OperationDefinition"!==e.kind)throw new m('Schema type definitions not allowed in queries. Found: "'+e.kind+'"');return e}));return w(t.length<=1,"Ambiguous GraphQL document: contains "+t.length+" operations"),e}function Q(e){return A(e),e.definitions.filter((function(e){return"OperationDefinition"===e.kind}))[0]}function N(e){return e.definitions.filter((function(e){return"FragmentDefinition"===e.kind}))}function V(e){var t;A(e);for(var r=0,n=e.definitions;r<n.length;r++){var i=n[r];if("OperationDefinition"===i.kind){var o=i.operation;if("query"===o||"mutation"===o||"subscription"===o)return i}"FragmentDefinition"!==i.kind||t||(t=i)}if(t)return t;throw new m("Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.")}function z(e){var t=Object.create(null),r=e&&e.variableDefinitions;return r&&r.length&&r.forEach((function(e){e.defaultValue&&T(t,e.variable.name,e.defaultValue)})),t}var L={kind:"Field",name:{kind:"Name",value:"__typename"}};function B(e){return t.visit(A(e),{SelectionSet:{enter:function(e,t,r){if(!r||"OperationDefinition"!==r.kind){var n=e.selections;if(n)if(!n.some((function(e){return F(e)&&("__typename"===e.name.value||0===e.name.value.lastIndexOf("__",0))}))){var i=r;if(!(F(i)&&i.directives&&i.directives.some((function(e){return"export"===e.name.value}))))return p(p({},e),{selections:d(n,[L])})}}}}})}B.added=function(e){return e===L};var W=Object.prototype.hasOwnProperty;function J(e){return null!==e&&"object"==typeof e}var U=function(e,t,r){return this.merge(e[r],t[r])},G=function(){function e(e){void 0===e&&(e=U),this.reconciler=e,this.isObject=J,this.pastCopies=new Set}return e.prototype.merge=function(e,t){for(var r=this,n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];return J(t)&&J(e)?(Object.keys(t).forEach((function(i){if(W.call(e,i)){var o=e[i];if(t[i]!==o){var a=r.reconciler.apply(r,d([e,t,i],n));a!==o&&((e=r.shallowCopyForMerge(e))[i]=a)}}else(e=r.shallowCopyForMerge(e))[i]=t[i]})),e):t},e.prototype.shallowCopyForMerge=function(e){return J(e)&&!this.pastCopies.has(e)&&(e=Array.isArray(e)?e.slice(0):p({__proto__:Object.getPrototypeOf(e)},e),this.pastCopies.add(e)),e},e}();var K,Y=function(e,t){return e(t={exports:{}},t.exports),t.exports}((function(e,t){function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function i(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}Object.defineProperty(t,"__esModule",{value:!0}),t.Observable=void 0;var o=function(){return"function"==typeof Symbol},a=function(e){return o()&&Boolean(Symbol[e])},s=function(e){return a(e)?Symbol[e]:"@@"+e};o()&&!a("observable")&&(Symbol.observable=Symbol("observable"));var u=s("iterator"),c=s("observable"),l=s("species");function f(e,t){var r=e[t];if(null!=r){if("function"!=typeof r)throw new TypeError(r+" is not a function");return r}}function p(e){var t=e.constructor;return void 0!==t&&null===(t=t[l])&&(t=void 0),void 0!==t?t:S}function h(e){return e instanceof S}function d(e){d.log?d.log(e):setTimeout((function(){throw e}))}function y(e){Promise.resolve().then((function(){try{e()}catch(e){d(e)}}))}function v(e){var t=e._cleanup;if(void 0!==t&&(e._cleanup=void 0,t))try{if("function"==typeof t)t();else{var r=f(t,"unsubscribe");r&&r.call(t)}}catch(e){d(e)}}function b(e){e._observer=void 0,e._queue=void 0,e._state="closed"}function g(e,t,r){e._state="running";var n=e._observer;try{var i=f(n,t);switch(t){case"next":i&&i.call(n,r);break;case"error":if(b(e),!i)throw r;i.call(n,r);break;case"complete":b(e),i&&i.call(n)}}catch(e){d(e)}"closed"===e._state?v(e):"running"===e._state&&(e._state="ready")}function m(e,t,r){if("closed"!==e._state){if("buffering"!==e._state)return"ready"!==e._state?(e._state="buffering",e._queue=[{type:t,value:r}],void y((function(){return function(e){var t=e._queue;if(t){e._queue=void 0,e._state="ready";for(var r=0;r<t.length&&(g(e,t[r].type,t[r].value),"closed"!==e._state);++r);}}(e)}))):void g(e,t,r);e._queue.push({type:t,value:r})}}var w=function(){function e(t,n){r(this,e),this._cleanup=void 0,this._observer=t,this._queue=void 0,this._state="initializing";var i=new O(this);try{this._cleanup=n.call(void 0,i)}catch(e){i.error(e)}"initializing"===this._state&&(this._state="ready")}return i(e,[{key:"unsubscribe",value:function(){"closed"!==this._state&&(b(this),v(this))}},{key:"closed",get:function(){return"closed"===this._state}}]),e}(),O=function(){function e(t){r(this,e),this._subscription=t}return i(e,[{key:"next",value:function(e){m(this._subscription,"next",e)}},{key:"error",value:function(e){m(this._subscription,"error",e)}},{key:"complete",value:function(){m(this._subscription,"complete")}},{key:"closed",get:function(){return"closed"===this._subscription._state}}]),e}(),S=function(){function e(t){if(r(this,e),!(this instanceof e))throw new TypeError("Observable cannot be called as a function");if("function"!=typeof t)throw new TypeError("Observable initializer must be a function");this._subscriber=t}return i(e,[{key:"subscribe",value:function(e){return"object"==typeof e&&null!==e||(e={next:e,error:arguments[1],complete:arguments[2]}),new w(e,this._subscriber)}},{key:"forEach",value:function(e){var t=this;return new Promise((function(r,n){if("function"==typeof e)var i=t.subscribe({next:function(t){try{e(t,o)}catch(e){n(e),i.unsubscribe()}},error:n,complete:r});else n(new TypeError(e+" is not a function"));function o(){i.unsubscribe(),r()}}))}},{key:"map",value:function(e){var t=this;if("function"!=typeof e)throw new TypeError(e+" is not a function");return new(p(this))((function(r){return t.subscribe({next:function(t){try{t=e(t)}catch(e){return r.error(e)}r.next(t)},error:function(e){r.error(e)},complete:function(){r.complete()}})}))}},{key:"filter",value:function(e){var t=this;if("function"!=typeof e)throw new TypeError(e+" is not a function");return new(p(this))((function(r){return t.subscribe({next:function(t){try{if(!e(t))return}catch(e){return r.error(e)}r.next(t)},error:function(e){r.error(e)},complete:function(){r.complete()}})}))}},{key:"reduce",value:function(e){var t=this;if("function"!=typeof e)throw new TypeError(e+" is not a function");var r=p(this),n=arguments.length>1,i=!1,o=arguments[1],a=o;return new r((function(r){return t.subscribe({next:function(t){var o=!i;if(i=!0,!o||n)try{a=e(a,t)}catch(e){return r.error(e)}else a=t},error:function(e){r.error(e)},complete:function(){if(!i&&!n)return r.error(new TypeError("Cannot reduce an empty sequence"));r.next(a),r.complete()}})}))}},{key:"concat",value:function(){for(var e=this,t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];var i=p(this);return new i((function(t){var n,o=0;return function e(a){n=a.subscribe({next:function(e){t.next(e)},error:function(e){t.error(e)},complete:function(){o===r.length?(n=void 0,t.complete()):e(i.from(r[o++]))}})}(e),function(){n&&(n.unsubscribe(),n=void 0)}}))}},{key:"flatMap",value:function(e){var t=this;if("function"!=typeof e)throw new TypeError(e+" is not a function");var r=p(this);return new r((function(n){var i=[],o=t.subscribe({next:function(t){if(e)try{t=e(t)}catch(e){return n.error(e)}var o=r.from(t).subscribe({next:function(e){n.next(e)},error:function(e){n.error(e)},complete:function(){var e=i.indexOf(o);e>=0&&i.splice(e,1),a()}});i.push(o)},error:function(e){n.error(e)},complete:function(){a()}});function a(){o.closed&&0===i.length&&n.complete()}return function(){i.forEach((function(e){return e.unsubscribe()})),o.unsubscribe()}}))}},{key:c,value:function(){return this}}],[{key:"from",value:function(t){var r="function"==typeof this?this:e;if(null==t)throw new TypeError(t+" is not an object");var n=f(t,c);if(n){var i=n.call(t);if(Object(i)!==i)throw new TypeError(i+" is not an object");return h(i)&&i.constructor===r?i:new r((function(e){return i.subscribe(e)}))}if(a("iterator")&&(n=f(t,u)))return new r((function(e){y((function(){if(!e.closed){var r=!0,i=!1,o=void 0;try{for(var a,s=n.call(t)[Symbol.iterator]();!(r=(a=s.next()).done);r=!0){var u=a.value;if(e.next(u),e.closed)return}}catch(e){i=!0,o=e}finally{try{r||null==s.return||s.return()}finally{if(i)throw o}}e.complete()}}))}));if(Array.isArray(t))return new r((function(e){y((function(){if(!e.closed){for(var r=0;r<t.length;++r)if(e.next(t[r]),e.closed)return;e.complete()}}))}));throw new TypeError(t+" is not observable")}},{key:"of",value:function(){for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];var i="function"==typeof this?this:e;return new i((function(e){y((function(){if(!e.closed){for(var t=0;t<r.length;++t)if(e.next(r[t]),e.closed)return;e.complete()}}))}))}},{key:l,get:function(){return this}}]),e}();t.Observable=S,o()&&Object.defineProperty(S,Symbol("extensions"),{value:{symbol:c,hostReportError:d},configurable:!0})}));(K=Y)&&K.__esModule&&Object.prototype.hasOwnProperty.call(K,"default")&&K.default,Y.Observable;var H=Y.Observable;!function(e){var t,r=e.Symbol;if("function"==typeof r)if(r.observable)t=r.observable;else{t=r.for("https://github.com/benlesh/symbol-observable");try{r.observable=t}catch(e){}}else t="@@observable"}("undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof module?module:Function("return this")());var $=H.prototype,Z="@@observable";$[Z]||($[Z]=function(){return this});var X=Object.prototype.toString;function ee(e){return te(e)}function te(e,t){switch(X.call(e)){case"[object Array]":if((t=t||new Map).has(e))return t.get(e);var r=e.slice(0);return t.set(e,r),r.forEach((function(e,n){r[n]=te(e,t)})),r;case"[object Object]":if((t=t||new Map).has(e))return t.get(e);var n=Object.create(Object.getPrototypeOf(e));return t.set(e,n),Object.keys(e).forEach((function(r){n[r]=te(e[r],t)})),n;default:return e}}function re(e){return"development"===e}function ne(e){return null!==e&&"object"==typeof e}function ie(e){var t,r;return!0!==re("development")&&!0!==re("test")||(t=e,(r=new Set([t])).forEach((function(e){ne(e)&&(Object.isFrozen(e)||Object.freeze(e),Object.getOwnPropertyNames(e).forEach((function(t){ne(e[t])&&r.add(e[t])})))}))),e}function oe(e,t,r){var n=[];e.forEach((function(e){return e[t]&&n.push(e)})),n.forEach((function(e){return e[t](r)}))}function ae(e){function t(t){Object.defineProperty(e,t,{value:H})}return"function"==typeof Symbol&&Symbol.species&&t(Symbol.species),t("@@species"),e}function se(e){return e&&"function"==typeof e.then}function ue(e){return Array.isArray(e)&&e.length>0}ae(function(e){function t(t){var r=e.call(this,(function(e){return r.addObserver(e),function(){return r.removeObserver(e)}}))||this;return r.observers=new Set,r.addCount=0,r.promise=new Promise((function(e,t){r.resolve=e,r.reject=t})),r.handlers={next:function(e){null!==r.sub&&(r.latest=["next",e],oe(r.observers,"next",e))},error:function(e){var t=r.sub;null!==t&&(t&&Promise.resolve().then((function(){return t.unsubscribe()})),r.sub=null,r.latest=["error",e],r.reject(e),oe(r.observers,"error",e))},complete:function(){if(null!==r.sub){var e=r.sources.shift();e?se(e)?e.then((function(e){return r.sub=e.subscribe(r.handlers)})):r.sub=e.subscribe(r.handlers):(r.sub=null,r.latest&&"next"===r.latest[0]?r.resolve(r.latest[1]):r.resolve(),oe(r.observers,"complete"))}}},r.cancel=function(e){r.reject(e),r.sources=[],r.handlers.complete()},r.promise.catch((function(e){})),"function"==typeof t&&(t=[new H(t)]),se(t)?t.then((function(e){return r.start(e)}),r.handlers.error):r.start(t),r}return f(t,e),t.prototype.start=function(e){void 0===this.sub&&(this.sources=Array.from(e),this.handlers.complete())},t.prototype.deliverLastMessage=function(e){if(this.latest){var t=this.latest[0],r=e[t];r&&r.call(e,this.latest[1]),null===this.sub&&"next"===t&&e.complete&&e.complete()}},t.prototype.addObserver=function(e){this.observers.has(e)||(this.deliverLastMessage(e),this.observers.add(e),++this.addCount)},t.prototype.removeObserver=function(e,t){this.observers.delete(e)&&--this.addCount<1&&!t&&this.handlers.error(new Error("Observable cancelled prematurely"))},t.prototype.cleanup=function(e){var t=this,r=!1,n=function(){r||(r=!0,t.observers.delete(i),e())},i={next:n,error:n,complete:n},o=this.addCount;this.addObserver(i),this.addCount=o},t}(H));var ce="function"==typeof WeakMap&&!("object"==typeof navigator&&"ReactNative"===navigator.product);function le(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=Object.create(null);return e.forEach((function(e){e&&Object.keys(e).forEach((function(t){var n=e[t];void 0!==n&&(r[t]=n)}))})),r}function fe(e){return new H((function(t){t.error(e)}))}var pe=function(e,t,r){var n=new Error(r);throw n.name="ServerError",n.response=e,n.statusCode=e.status,n.result=t,n};function he(e,t){return t?t(e):H.of()}function de(e){return"function"==typeof e?new be(e):e}function ye(e){return e.request.length<=1}var ve=function(e){function t(t,r){var n=e.call(this,t)||this;return n.link=r,n}return f(t,e),t}(Error),be=function(){function e(e){e&&(this.request=e)}return e.empty=function(){return new e((function(){return H.of()}))},e.from=function(t){return 0===t.length?e.empty():t.map(de).reduce((function(e,t){return e.concat(t)}))},e.split=function(t,r,n){var i=de(r),o=de(n||new e(he));return ye(i)&&ye(o)?new e((function(e){return t(e)?i.request(e)||H.of():o.request(e)||H.of()})):new e((function(e,r){return t(e)?i.request(e,r)||H.of():o.request(e,r)||H.of()}))},e.execute=function(e,t){return e.request(function(e,t){var r=p({},e);return Object.defineProperty(t,"setContext",{enumerable:!1,value:function(e){r=p(p({},r),"function"==typeof e?e(r):e)}}),Object.defineProperty(t,"getContext",{enumerable:!1,value:function(){return p({},r)}}),t}(t.context,function(e){var t={variables:e.variables||{},extensions:e.extensions||{},operationName:e.operationName,query:e.query};return t.operationName||(t.operationName="string"!=typeof t.query?t.query.definitions.filter((function(e){return"OperationDefinition"===e.kind&&e.name})).map((function(e){return e.name.value}))[0]||void 0:""),t}(function(e){for(var t=["query","operationName","variables","extensions","context"],r=0,n=Object.keys(e);r<n.length;r++){var i=n[r];if(t.indexOf(i)<0)throw new m("illegal argument: "+i)}return e}(t))))||H.of()},e.concat=function(t,r){var n=de(t);if(ye(n))return w.warn(new ve("You are calling concat on a terminating link, which will have no effect",n)),n;var i=de(r);return ye(i)?new e((function(e){return n.request(e,(function(e){return i.request(e)||H.of()}))||H.of()})):new e((function(e,t){return n.request(e,(function(e){return i.request(e,t)||H.of()}))||H.of()}))},e.prototype.split=function(t,r,n){return this.concat(e.split(t,r,n||new e(he)))},e.prototype.concat=function(t){return e.concat(this,t)},e.prototype.request=function(e,t){throw new m("request is not implemented")},e.prototype.onError=function(e,t){if(t&&t.error)return t.error(e),!1;throw e},e.prototype.setOnError=function(e){return this.onError=e,this},e}(),ge=Object.prototype.hasOwnProperty;var me=function(e,t){var r;try{r=JSON.stringify(e)}catch(e){var n=new m("Network request failed. "+t+" is not serializable: "+e.message);throw n.parseError=e,n}return r},we={http:{includeQuery:!0,includeExtensions:!1},headers:{accept:"*/*","content-type":"application/json"},options:{method:"POST"}};var Oe=function(e){void 0===e&&(e={});var r=e.uri,n=void 0===r?"/graphql":r,i=e.fetch,o=e.includeExtensions,a=e.useGETForQueries,s=e.includeUnusedVariables,u=void 0!==s&&s,c=h(e,["uri","fetch","includeExtensions","useGETForQueries","includeUnusedVariables"]);!function(e){if(!e&&"undefined"==typeof fetch)throw new m("\n\"fetch\" has not been found globally and no fetcher has been configured. To fix this, install a fetch package (like https://www.npmjs.com/package/cross-fetch), instantiate the fetcher, and pass it into your HttpLink constructor. For example:\n\nimport fetch from 'cross-fetch';\nimport { ApolloClient, HttpLink } from '@apollo/client';\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: '/graphql', fetch })\n});\n    ")}(i),i||(i=fetch);var l={http:{includeExtensions:o},options:c.fetchOptions,credentials:c.credentials,headers:c.headers};return new be((function(e){var r=function(e,t){return e.getContext().uri||("function"==typeof t?t(e):t||"/graphql")}(e,n),o=e.getContext(),s={};if(o.clientAwareness){var c=o.clientAwareness,f=c.name,h=c.version;f&&(s["apollographql-client-name"]=f),h&&(s["apollographql-client-version"]=h)}var d,y=p(p({},s),o.headers),v={http:o.http,options:o.fetchOptions,credentials:o.credentials,headers:y},b=function(e,r){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];var o=p(p({},r.options),{headers:r.headers,credentials:r.credentials}),a=r.http||{};n.forEach((function(e){o=p(p(p({},o),e.options),{headers:p(p({},o.headers),e.headers)}),e.credentials&&(o.credentials=e.credentials),a=p(p({},a),e.http)}));var s=e.operationName,u=e.extensions,c=e.variables,l=e.query,f={operationName:s,variables:c};return a.includeExtensions&&(f.extensions=u),a.includeQuery&&(f.query=t.print(l)),{options:o,body:f}}(e,we,l,v),g=b.options,m=b.body;if(m.variables&&!u){var w=new Set(Object.keys(m.variables));t.visit(e.query,{Variable:function(e,t,r){r&&"VariableDefinition"!==r.kind&&w.delete(e.name.value)}}),w.size&&(m.variables=p({},m.variables),w.forEach((function(e){delete m.variables[e]})))}if(!g.signal){var O=function(){if("undefined"==typeof AbortController)return{controller:!1,signal:!1};var e=new AbortController;return{controller:e,signal:e.signal}}(),S=O.controller,k=O.signal;(d=S)&&(g.signal=k)}if(a&&!e.query.definitions.some((function(e){return"OperationDefinition"===e.kind&&"mutation"===e.operation}))&&(g.method="GET"),"GET"===g.method){var x=function(e,t){var r=[],n=function(e,t){r.push(e+"="+encodeURIComponent(t))};if("query"in t&&n("query",t.query),t.operationName&&n("operationName",t.operationName),t.variables){var i=void 0;try{i=me(t.variables,"Variables map")}catch(e){return{parseError:e}}n("variables",i)}if(t.extensions){var o=void 0;try{o=me(t.extensions,"Extensions map")}catch(e){return{parseError:e}}n("extensions",o)}var a="",s=e,u=e.indexOf("#");-1!==u&&(a=e.substr(u),s=e.substr(0,u));var c=-1===s.indexOf("?")?"?":"&";return{newURI:s+c+r.join("&")+a}}(r,m),E=x.newURI,j=x.parseError;if(j)return fe(j);r=E}else try{g.body=me(m,"Payload")}catch(j){return fe(j)}return new H((function(t){var n;return i(r,g).then((function(t){return e.setContext({response:t}),t})).then((n=e,function(e){return e.text().then((function(t){try{return JSON.parse(t)}catch(n){var r=n;throw r.name="ServerParseError",r.response=e,r.statusCode=e.status,r.bodyText=t,r}})).then((function(t){return e.status>=300&&pe(e,t,"Response not successful: Received status code "+e.status),Array.isArray(t)||ge.call(t,"data")||ge.call(t,"errors")||pe(e,t,"Server response was missing for query '"+(Array.isArray(n)?n.map((function(e){return e.operationName})):n.operationName)+"'."),t}))})).then((function(e){return t.next(e),t.complete(),e})).catch((function(e){"AbortError"!==e.name&&(e.result&&e.result.errors&&e.result.data&&t.next(e.result),t.error(e))})),function(){d&&d.abort()}}))}))};!function(e){function t(t){void 0===t&&(t={});var r=e.call(this,Oe(t).request)||this;return r.options=t,r}f(t,e)}(be);var Se=Object.prototype,ke=Se.toString,xe=Se.hasOwnProperty,Ee=Function.prototype.toString,je=new Map;function _e(e,t){try{return Re(e,t)}finally{je.clear()}}function Re(e,t){if(e===t)return!0;var r,n,i,o=ke.call(e);if(o!==ke.call(t))return!1;switch(o){case"[object Array]":if(e.length!==t.length)return!1;case"[object Object]":if(Pe(e,t))return!0;var a=Me(e),s=Me(t),u=a.length;if(u!==s.length)return!1;for(var c=0;c<u;++c)if(!xe.call(t,a[c]))return!1;for(c=0;c<u;++c){var l=a[c];if(!Re(e[l],t[l]))return!1}return!0;case"[object Error]":return e.name===t.name&&e.message===t.message;case"[object Number]":if(e!=e)return t!=t;case"[object Boolean]":case"[object Date]":return+e==+t;case"[object RegExp]":case"[object String]":return e==""+t;case"[object Map]":case"[object Set]":if(e.size!==t.size)return!1;if(Pe(e,t))return!0;for(var f=e.entries(),p="[object Map]"===o;;){var h=f.next();if(h.done)break;var d=h.value,y=d[0],v=d[1];if(!t.has(y))return!1;if(p&&!Re(v,t.get(y)))return!1}return!0;case"[object AsyncFunction]":case"[object GeneratorFunction]":case"[object AsyncGeneratorFunction]":case"[object Function]":var b=Ee.call(e);return b===Ee.call(t)&&(n=Te,!((i=(r=b).length-n.length)>=0&&r.indexOf(n,i)===i))}return!1}function Me(e){return Object.keys(e).filter(qe,e)}function qe(e){return void 0!==this[e]}var Te="{ [native code] }";function Pe(e,t){var r=je.get(e);if(r){if(r.has(t))return!0}else je.set(e,r=new Set);return r.add(t),!1}var Ce,De=function(e){function t(r){var n,i,o=r.graphQLErrors,a=r.networkError,s=r.errorMessage,u=r.extraInfo,c=e.call(this,s)||this;return c.graphQLErrors=o||[],c.networkError=a||null,c.message=s||(i="",ue((n=c).graphQLErrors)&&n.graphQLErrors.forEach((function(e){var t=e?e.message:"Error message not found.";i+=t+"\n"})),n.networkError&&(i+=n.networkError.message+"\n"),i=i.replace(/\n$/,"")),c.extraInfo=u,c.__proto__=t.prototype,c}return f(t,e),t}(Error);function Ie(e){return!!e&&e<7}!function(e){e[e.loading=1]="loading",e[e.setVariables=2]="setVariables",e[e.fetchMore=3]="fetchMore",e[e.refetch=4]="refetch",e[e.poll=6]="poll",e[e.ready=7]="ready",e[e.error=8]="error"}(Ce||(Ce={}));var Fe=function(){function e(e,t,r,n){this.observer=e,this.options=t,this.fetch=r,this.shouldFetch=n}return e.prototype.reobserve=function(e,t){e?this.updateOptions(e):this.updatePolling();var r=this.fetch(this.options,t);return this.concast&&this.concast.removeObserver(this.observer,!0),r.addObserver(this.observer),(this.concast=r).promise},e.prototype.updateOptions=function(e){return Object.assign(this.options,le(e)),this.updatePolling(),this},e.prototype.stop=function(){this.concast&&(this.concast.removeObserver(this.observer),delete this.concast),this.pollingInfo&&(clearTimeout(this.pollingInfo.timeout),this.options.pollInterval=0,this.updatePolling())},e.prototype.updatePolling=function(){var e=this,t=this.pollingInfo,r=this.options.pollInterval;if(r){if((!t||t.interval!==r)&&(w(r,"Attempted to start a polling query without a polling interval."),!1!==this.shouldFetch)){(t||(this.pollingInfo={})).interval=r;var n=function(){e.pollingInfo&&(e.shouldFetch&&e.shouldFetch()?e.reobserve({fetchPolicy:"network-only",nextFetchPolicy:e.options.fetchPolicy||"cache-first"},Ce.poll).then(i,i):i())},i=function(){var t=e.pollingInfo;t&&(clearTimeout(t.timeout),t.timeout=setTimeout(n,t.interval))};i()}}else t&&(clearTimeout(t.timeout),delete this.pollingInfo)},e}(),Ae=!1;function Qe(e){w.error("Unhandled error",e.message,e.stack)}ae(function(e){function t(t){var r=t.queryManager,n=t.queryInfo,i=t.options,o=e.call(this,(function(e){return o.onSubscribe(e)}))||this;o.observers=new Set,o.subscriptions=new Set,o.observer={next:function(e){(o.lastError||o.isDifferentFromLastResult(e))&&(o.updateLastResult(e),oe(o.observers,"next",e))},error:function(e){o.updateLastResult(p(p({},o.lastResult),{error:e,errors:e.graphQLErrors,networkStatus:Ce.error,loading:!1})),oe(o.observers,"error",o.lastError=e)}},o.isTornDown=!1,o.options=i,o.queryId=r.generateQueryId();var a=Q(i.query);return o.queryName=a&&a.name&&a.name.value,o.queryManager=r,o.queryInfo=n,o}return f(t,e),Object.defineProperty(t.prototype,"variables",{get:function(){return this.options.variables},enumerable:!1,configurable:!0}),t.prototype.result=function(){var e=this;return new Promise((function(t,r){var n={next:function(r){t(r),e.observers.delete(n),e.observers.size||e.queryManager.removeQuery(e.queryId),setTimeout((function(){i.unsubscribe()}),0)},error:r},i=e.subscribe(n)}))},t.prototype.getCurrentResult=function(e){void 0===e&&(e=!0);var t=this.lastResult,r=this.queryInfo.networkStatus||t&&t.networkStatus||Ce.ready,n=p(p({},t),{loading:Ie(r),networkStatus:r});if(this.isTornDown)return n;var i=this.options.fetchPolicy,o=void 0===i?"cache-first":i;if("no-cache"===o||"network-only"===o)delete n.partial;else if(!n.data||!this.queryManager.transform(this.options.query).hasForcedResolvers){var a=this.queryInfo.getDiff();n.data=a.complete||this.options.returnPartialData?a.result:void 0,a.complete?(n.networkStatus!==Ce.loading||"cache-first"!==o&&"cache-only"!==o||(n.networkStatus=Ce.ready,n.loading=!1),delete n.partial):n.partial=!0}return e&&this.updateLastResult(n),n},t.prototype.isDifferentFromLastResult=function(e){return!_e(this.lastResultSnapshot,e)},t.prototype.getLastResult=function(){return this.lastResult},t.prototype.getLastError=function(){return this.lastError},t.prototype.resetLastResults=function(){delete this.lastResult,delete this.lastResultSnapshot,delete this.lastError,this.isTornDown=!1},t.prototype.resetQueryStoreErrors=function(){this.queryManager.resetErrors(this.queryId)},t.prototype.refetch=function(e){var t={pollInterval:0},r=this.options.fetchPolicy;return"no-cache"!==r&&"cache-and-network"!==r&&(t.fetchPolicy="network-only",t.nextFetchPolicy=r||"cache-first"),e&&!_e(this.options.variables,e)&&(t.variables=this.options.variables=p(p({},this.options.variables),e)),this.newReobserver(!1).reobserve(t,Ce.refetch)},t.prototype.fetchMore=function(e){var t=this,r=p(p({},e.query?e:p(p(p({},this.options),e),{variables:p(p({},this.options.variables),e.variables)})),{fetchPolicy:"no-cache"}),n=this.queryManager.generateQueryId();return r.notifyOnNetworkStatusChange&&(this.queryInfo.networkStatus=Ce.fetchMore,this.observe()),this.queryManager.fetchQuery(n,r,Ce.fetchMore).then((function(n){var i=n.data,o=e.updateQuery;return o?(Ae||(w.warn("The updateQuery callback for fetchMore is deprecated, and will be removed\nin the next major version of Apollo Client.\n\nPlease convert updateQuery functions to field policies with appropriate\nread and merge functions, or use/adapt a helper function (such as\nconcatPagination, offsetLimitPagination, or relayStylePagination) from\n@apollo/client/utilities.\n\nThe field policy system handles pagination more effectively than a\nhand-written updateQuery function, and you only need to define the policy\nonce, rather than every time you call fetchMore."),Ae=!0),t.updateQuery((function(e){return o(e,{fetchMoreResult:i,variables:r.variables})}))):t.queryManager.cache.writeQuery({query:r.query,variables:r.variables,data:i}),n})).finally((function(){t.queryManager.stopQuery(n),t.reobserve()}))},t.prototype.subscribeToMore=function(e){var t=this,r=this.queryManager.startGraphQLSubscription({query:e.document,variables:e.variables,context:e.context}).subscribe({next:function(r){var n=e.updateQuery;n&&t.updateQuery((function(e,t){var i=t.variables;return n(e,{subscriptionData:r,variables:i})}))},error:function(t){e.onError?e.onError(t):w.error("Unhandled GraphQL subscription error",t)}});return this.subscriptions.add(r),function(){t.subscriptions.delete(r)&&r.unsubscribe()}},t.prototype.setOptions=function(e){return this.reobserve(e)},t.prototype.setVariables=function(e){if(_e(this.variables,e))return this.observers.size?this.result():Promise.resolve();if(this.options.variables=e,!this.observers.size)return Promise.resolve();var t=this.options.fetchPolicy,r=void 0===t?"cache-first":t,n={fetchPolicy:r,variables:e};return"cache-first"!==r&&"no-cache"!==r&&"network-only"!==r&&(n.fetchPolicy="cache-and-network",n.nextFetchPolicy=r),this.reobserve(n,Ce.setVariables)},t.prototype.updateQuery=function(e){var t,r=this.queryManager,n=e(r.cache.diff({query:this.options.query,variables:this.variables,previousResult:null===(t=this.lastResult)||void 0===t?void 0:t.data,returnPartialData:!0,optimistic:!1}).result,{variables:this.variables});n&&(r.cache.writeQuery({query:this.options.query,data:n,variables:this.variables}),r.broadcastQueries())},t.prototype.startPolling=function(e){this.getReobserver().updateOptions({pollInterval:e})},t.prototype.stopPolling=function(){this.reobserver&&this.reobserver.updateOptions({pollInterval:0})},t.prototype.updateLastResult=function(e){var t=this.lastResult;return this.lastResult=e,this.lastResultSnapshot=this.queryManager.assumeImmutableResults?e:ee(e),ue(e.errors)||delete this.lastError,t},t.prototype.onSubscribe=function(e){var t=this;if(e===this.observer)return function(){};try{var r=e._subscription._observer;r&&!r.error&&(r.error=Qe)}catch(e){}var n=!this.observers.size;return this.observers.add(e),this.lastError?e.error&&e.error(this.lastError):this.lastResult&&e.next&&e.next(this.lastResult),n&&this.reobserve().catch((function(e){})),function(){t.observers.delete(e)&&!t.observers.size&&t.tearDownQuery()}},t.prototype.getReobserver=function(){return this.reobserver||(this.reobserver=this.newReobserver(!0))},t.prototype.newReobserver=function(e){var t=this,r=this.queryManager,n=this.queryId;return r.setObservableQuery(this),new Fe(this.observer,e?this.options:p({},this.options),(function(e,i){return r.setObservableQuery(t),r.fetchQueryObservable(n,e,i)}),!r.ssrMode&&function(){return!Ie(t.queryInfo.networkStatus)})},t.prototype.reobserve=function(e,t){return this.isTornDown=!1,this.getReobserver().reobserve(e,t)},t.prototype.observe=function(){this.observer.next(this.getCurrentResult(!1))},t.prototype.hasObservers=function(){return this.observers.size>0},t.prototype.tearDownQuery=function(){this.isTornDown||(this.reobserver&&(this.reobserver.stop(),delete this.reobserver),this.subscriptions.forEach((function(e){return e.unsubscribe()})),this.subscriptions.clear(),this.queryManager.stopQuery(this.queryId),this.observers.clear(),this.isTornDown=!0)},t}(H));var Ne=function(){return Object.create(null)},Ve=Array.prototype,ze=Ve.forEach,Le=Ve.slice,Be=function(){function e(e,t){void 0===e&&(e=!0),void 0===t&&(t=Ne),this.weakness=e,this.makeData=t}return e.prototype.lookup=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.lookupArray(e)},e.prototype.lookupArray=function(e){var t=this;return ze.call(e,(function(e){return t=t.getChildTrie(e)})),t.data||(t.data=this.makeData(Le.call(e)))},e.prototype.getChildTrie=function(t){var r=this.weakness&&function(e){switch(typeof e){case"object":if(null===e)break;case"function":return!0}return!1}(t)?this.weak||(this.weak=new WeakMap):this.strong||(this.strong=new Map),n=r.get(t);return n||r.set(t,n=new e(this.weakness,this.makeData)),n},e}();var We=null,Je={},Ue=1,Ge="@wry/context:Slot",Ke=Array,Ye=Ke[Ge]||function(){var e=function(){function e(){this.id=["slot",Ue++,Date.now(),Math.random().toString(36).slice(2)].join(":")}return e.prototype.hasValue=function(){for(var e=We;e;e=e.parent)if(this.id in e.slots){var t=e.slots[this.id];if(t===Je)break;return e!==We&&(We.slots[this.id]=t),!0}return We&&(We.slots[this.id]=Je),!1},e.prototype.getValue=function(){if(this.hasValue())return We.slots[this.id]},e.prototype.withValue=function(e,t,r,n){var i,o=((i={__proto__:null})[this.id]=e,i),a=We;We={parent:a,slots:o};try{return t.apply(n,r)}finally{We=a}},e.bind=function(e){var t=We;return function(){var r=We;try{return We=t,e.apply(this,arguments)}finally{We=r}}},e.noContext=function(e,t,r){if(!We)return e.apply(r,t);var n=We;try{return We=null,e.apply(r,t)}finally{We=n}},e}();try{Object.defineProperty(Ke,Ge,{value:Ke[Ge]=e,enumerable:!1,writable:!1,configurable:!1})}finally{return e}}();function He(){}Ye.bind,Ye.noContext;var $e,Ze=function(){function e(e,t){void 0===e&&(e=1/0),void 0===t&&(t=He),this.max=e,this.dispose=t,this.map=new Map,this.newest=null,this.oldest=null}return e.prototype.has=function(e){return this.map.has(e)},e.prototype.get=function(e){var t=this.getNode(e);return t&&t.value},e.prototype.getNode=function(e){var t=this.map.get(e);if(t&&t!==this.newest){var r=t.older,n=t.newer;n&&(n.older=r),r&&(r.newer=n),t.older=this.newest,t.older.newer=t,t.newer=null,this.newest=t,t===this.oldest&&(this.oldest=n)}return t},e.prototype.set=function(e,t){var r=this.getNode(e);return r?r.value=t:(r={key:e,value:t,newer:null,older:this.newest},this.newest&&(this.newest.newer=r),this.newest=r,this.oldest=this.oldest||r,this.map.set(e,r),r.value)},e.prototype.clean=function(){for(;this.oldest&&this.map.size>this.max;)this.delete(this.oldest.key)},e.prototype.delete=function(e){var t=this.map.get(e);return!!t&&(t===this.newest&&(this.newest=t.older),t===this.oldest&&(this.oldest=t.newer),t.newer&&(t.newer.older=t.older),t.older&&(t.older.newer=t.newer),this.map.delete(e),this.dispose(t.value,e),!0)},e}(),Xe=new Ye,et=Object.prototype.hasOwnProperty,tt=void 0===($e=Array.from)?function(e){var t=[];return e.forEach((function(e){return t.push(e)})),t}:$e;function rt(e){var t=e.unsubscribe;"function"==typeof t&&(e.unsubscribe=void 0,t())}var nt=[];function it(e,t){if(!e)throw new Error(t||"assertion failure")}function ot(e){switch(e.length){case 0:throw new Error("unknown value");case 1:return e[0];case 2:throw e[1]}}var at=function(){function e(t){this.fn=t,this.parents=new Set,this.childValues=new Map,this.dirtyChildren=null,this.dirty=!0,this.recomputing=!1,this.value=[],this.deps=null,++e.count}return e.prototype.peek=function(){if(1===this.value.length&&!ct(this))return st(this),this.value[0]},e.prototype.recompute=function(e){return it(!this.recomputing,"already recomputing"),st(this),ct(this)?function(e,t){vt(e),Xe.withValue(e,ut,[e,t]),function(e,t){if("function"==typeof e.subscribe)try{rt(e),e.unsubscribe=e.subscribe.apply(null,t)}catch(t){return e.setDirty(),!1}return!0}(e,t)&&function(e){if(e.dirty=!1,ct(e))return;ft(e)}(e);return ot(e.value)}(this,e):ot(this.value)},e.prototype.setDirty=function(){this.dirty||(this.dirty=!0,this.value.length=0,lt(this),rt(this))},e.prototype.dispose=function(){var e=this;this.setDirty(),vt(this),pt(this,(function(t,r){t.setDirty(),bt(t,e)}))},e.prototype.forget=function(){this.dispose()},e.prototype.dependOn=function(e){e.add(this),this.deps||(this.deps=nt.pop()||new Set),this.deps.add(e)},e.prototype.forgetDeps=function(){var e=this;this.deps&&(tt(this.deps).forEach((function(t){return t.delete(e)})),this.deps.clear(),nt.push(this.deps),this.deps=null)},e.count=0,e}();function st(e){var t=Xe.getValue();if(t)return e.parents.add(t),t.childValues.has(e)||t.childValues.set(e,[]),ct(e)?ht(t,e):dt(t,e),t}function ut(e,t){e.recomputing=!0,e.value.length=0;try{e.value[0]=e.fn.apply(null,t)}catch(t){e.value[1]=t}e.recomputing=!1}function ct(e){return e.dirty||!(!e.dirtyChildren||!e.dirtyChildren.size)}function lt(e){pt(e,ht)}function ft(e){pt(e,dt)}function pt(e,t){var r=e.parents.size;if(r)for(var n=tt(e.parents),i=0;i<r;++i)t(n[i],e)}function ht(e,t){it(e.childValues.has(t)),it(ct(t));var r=!ct(e);if(e.dirtyChildren){if(e.dirtyChildren.has(t))return}else e.dirtyChildren=nt.pop()||new Set;e.dirtyChildren.add(t),r&&lt(e)}function dt(e,t){it(e.childValues.has(t)),it(!ct(t));var r,n,i,o=e.childValues.get(t);0===o.length?e.childValues.set(t,t.value.slice(0)):(r=o,n=t.value,(i=r.length)>0&&i===n.length&&r[i-1]===n[i-1]||e.setDirty()),yt(e,t),ct(e)||ft(e)}function yt(e,t){var r=e.dirtyChildren;r&&(r.delete(t),0===r.size&&(nt.length<100&&nt.push(r),e.dirtyChildren=null))}function vt(e){e.childValues.size>0&&e.childValues.forEach((function(t,r){bt(e,r)})),e.forgetDeps(),it(null===e.dirtyChildren)}function bt(e,t){t.parents.delete(e),e.childValues.delete(t),yt(e,t)}var gt={setDirty:!0,dispose:!0,forget:!0};function mt(e){var t=new Map,r=e&&e.subscribe;function n(e){var n=Xe.getValue();if(n){var i=t.get(e);i||t.set(e,i=new Set),n.dependOn(i),"function"==typeof r&&(rt(i),i.unsubscribe=r(e))}}return n.dirty=function(e,r){var n=t.get(e);if(n){var i=r&&et.call(gt,r)?r:"setDirty";tt(n).forEach((function(e){return e[i]()})),t.delete(e),rt(n)}},n}function wt(){var e=new Be("function"==typeof WeakMap);return function(){return e.lookupArray(arguments)}}wt();var Ot=new Set;function St(e,t){void 0===t&&(t=Object.create(null));var r=new Ze(t.max||Math.pow(2,16),(function(e){return e.dispose()})),n=t.keyArgs,i=t.makeCacheKey||wt(),o=function(){var o=i.apply(null,n?n.apply(null,arguments):arguments);if(void 0===o)return e.apply(null,arguments);var a=r.get(o);a||(r.set(o,a=new at(e)),a.subscribe=t.subscribe,a.forget=function(){return r.delete(o)});var s=a.recompute(Array.prototype.slice.call(arguments));return r.set(o,a),Ot.add(r),Xe.hasValue()||(Ot.forEach((function(e){return e.clean()})),Ot.clear()),s};function a(e){var t=r.get(e);t&&t.setDirty()}function s(e){var t=r.get(e);if(t)return t.peek()}function u(e){return r.delete(e)}return Object.defineProperty(o,"size",{get:function(){return r.map.size},configurable:!1,enumerable:!1}),o.dirtyKey=a,o.dirty=function(){a(i.apply(null,arguments))},o.peekKey=s,o.peek=function(){return s(i.apply(null,arguments))},o.forgetKey=u,o.forget=function(){return u(i.apply(null,arguments))},o.makeCacheKey=i,o.getKey=n?function(){return i.apply(null,n.apply(null,arguments))}:i,Object.freeze(o)}var kt=function(){function e(){this.getFragmentDoc=St(j)}return e.prototype.recordOptimisticTransaction=function(e,t){this.performTransaction(e,t)},e.prototype.transformDocument=function(e){return e},e.prototype.identify=function(e){},e.prototype.gc=function(){return[]},e.prototype.modify=function(e){return!1},e.prototype.transformForLink=function(e){return e},e.prototype.readQuery=function(e,t){return void 0===t&&(t=!!e.optimistic),this.read({rootId:e.id||"ROOT_QUERY",query:e.query,variables:e.variables,returnPartialData:e.returnPartialData,optimistic:t})},e.prototype.readFragment=function(e,t){return void 0===t&&(t=!!e.optimistic),this.read({query:this.getFragmentDoc(e.fragment,e.fragmentName),variables:e.variables,rootId:e.id,returnPartialData:e.returnPartialData,optimistic:t})},e.prototype.writeQuery=function(e){return this.write({dataId:e.id||"ROOT_QUERY",result:e.data,query:e.query,variables:e.variables,broadcast:e.broadcast})},e.prototype.writeFragment=function(e){return this.write({dataId:e.id,result:e.data,variables:e.variables,query:this.getFragmentDoc(e.fragment,e.fragmentName),broadcast:e.broadcast})},e}(),xt=function(e,t,r,n,i){this.message=e,this.path=t,this.query=r,this.clientOnly=n,this.variables=i},Et=Object.prototype.hasOwnProperty;var jt=/^[_a-z][_0-9a-z]*/i;function _t(e){var t=e.match(jt);return t?t[0]:e}function Rt(e,t,r){return!(!t||"object"!=typeof t)&&(Array.isArray(t)?t.every((function(t){return Rt(e,t,r)})):e.selections.every((function(e){if(F(e)&&x(e,r)){var n=D(e);return Et.call(t,n)&&(!e.selectionSet||Rt(e.selectionSet,t[n],r))}return!0})))}function Mt(e){return null!==e&&"object"==typeof e&&!q(e)&&!Array.isArray(e)}var qt=Object.create(null),Tt=function(){return qt},Pt=Object.create(null),Ct=function(){function e(e,t){var r=this;this.policies=e,this.group=t,this.data=Object.create(null),this.rootIds=Object.create(null),this.refs=Object.create(null),this.getFieldValue=function(e,t){return ie(q(e)?r.get(e.__ref,t):e&&e[t])},this.canRead=function(e){return q(e)?r.has(e.__ref):"object"==typeof e},this.toReference=function(e,t){if("string"==typeof e)return M(e);if(q(e))return e;var n=r.policies.identify(e)[0];if(n){var i=M(n);return t&&r.merge(n,e),i}}}return e.prototype.toObject=function(){return p({},this.data)},e.prototype.has=function(e){return void 0!==this.lookup(e,!0)},e.prototype.get=function(e,t){if(this.group.depend(e,t),Et.call(this.data,e)){var r=this.data[e];if(r&&Et.call(r,t))return r[t]}return"__typename"===t&&Et.call(this.policies.rootTypenamesById,e)?this.policies.rootTypenamesById[e]:this instanceof Ft?this.parent.get(e,t):void 0},e.prototype.lookup=function(e,t){return t&&this.group.depend(e,"__exists"),Et.call(this.data,e)?this.data[e]:this instanceof Ft?this.parent.lookup(e,t):this.policies.rootTypenamesById[e]?Object.create(null):void 0},e.prototype.merge=function(e,t){var r=this,n=this.lookup(e),i=new G(At).merge(n,t);if(this.data[e]=i,i!==n&&(delete this.refs[e],this.group.caching)){var o=Object.create(null);n||(o.__exists=1),Object.keys(t).forEach((function(e){if(!n||n[e]!==i[e]){o[e]=1;var t=_t(e);t===e||r.policies.hasKeyArgs(i.__typename,t)||(o[t]=1),void 0!==i[e]||r instanceof Ft||delete i[e]}})),Object.keys(o).forEach((function(t){return r.group.dirty(e,t)}))}},e.prototype.modify=function(e,t){var r=this,n=this.lookup(e);if(n){var i=Object.create(null),o=!1,a=!0,s={DELETE:qt,INVALIDATE:Pt,isReference:q,toReference:this.toReference,canRead:this.canRead,readField:function(t,n){return r.policies.readField("string"==typeof t?{fieldName:t,from:n||M(e)}:t,{store:r})}};if(Object.keys(n).forEach((function(u){var c=_t(u),l=n[u];if(void 0!==l){var f="function"==typeof t?t:t[u]||t[c];if(f){var h=f===Tt?qt:f(ie(l),p(p({},s),{fieldName:c,storeFieldName:u,storage:r.getStorage(e,u)}));h===Pt?r.group.dirty(e,u):(h===qt&&(h=void 0),h!==l&&(i[u]=h,o=!0,l=h))}void 0!==l&&(a=!1)}})),o)return this.merge(e,i),a&&(this instanceof Ft?this.data[e]=void 0:delete this.data[e],this.group.dirty(e,"__exists")),!0}return!1},e.prototype.delete=function(e,t,r){var n,i=this.lookup(e);if(i){var o=this.getFieldValue(i,"__typename"),a=t&&r?this.policies.getStoreFieldName({typename:o,fieldName:t,args:r}):t;return this.modify(e,a?((n={})[a]=Tt,n):Tt)}return!1},e.prototype.evict=function(e){var t=!1;return e.id&&(Et.call(this.data,e.id)&&(t=this.delete(e.id,e.fieldName,e.args)),this instanceof Ft&&(t=this.parent.evict(e)||t),(e.fieldName||t)&&this.group.dirty(e.id,e.fieldName||"__exists")),t},e.prototype.clear=function(){this.replace(null)},e.prototype.extract=function(){var e=this,t=this.toObject(),r=[];return this.getRootIdSet().forEach((function(t){Et.call(e.policies.rootTypenamesById,t)||r.push(t)})),r.length&&(t.__META={extraRootIds:r.sort()}),t},e.prototype.replace=function(e){var t=this;if(Object.keys(this.data).forEach((function(r){e&&Et.call(e,r)||t.delete(r)})),e){var r=e.__META,n=h(e,["__META"]);Object.keys(n).forEach((function(e){t.merge(e,n[e])})),r&&r.extraRootIds.forEach(this.retain,this)}},e.prototype.retain=function(e){return this.rootIds[e]=(this.rootIds[e]||0)+1},e.prototype.release=function(e){if(this.rootIds[e]>0){var t=--this.rootIds[e];return t||delete this.rootIds[e],t}return 0},e.prototype.getRootIdSet=function(e){return void 0===e&&(e=new Set),Object.keys(this.rootIds).forEach(e.add,e),this instanceof Ft?this.parent.getRootIdSet(e):Object.keys(this.policies.rootTypenamesById).forEach(e.add,e),e},e.prototype.gc=function(){var e=this,t=this.getRootIdSet(),r=this.toObject();t.forEach((function(n){Et.call(r,n)&&(Object.keys(e.findChildRefIds(n)).forEach(t.add,t),delete r[n])}));var n=Object.keys(r);if(n.length){for(var i=this;i instanceof Ft;)i=i.parent;n.forEach((function(e){return i.delete(e)}))}return n},e.prototype.findChildRefIds=function(e){if(!Et.call(this.refs,e)){var t=this.refs[e]=Object.create(null),r=new Set([this.data[e]]),n=function(e){return null!==e&&"object"==typeof e};r.forEach((function(e){q(e)?t[e.__ref]=!0:n(e)&&Object.values(e).filter(n).forEach(r.add,r)}))}return this.refs[e]},e.prototype.makeCacheKey=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.group.keyMaker.lookupArray(e)},e}(),Dt=function(){function e(e){this.caching=e,this.d=null,this.keyMaker=new Be(ce),this.d=e?mt():null}return e.prototype.depend=function(e,t){if(this.d){this.d(It(e,t));var r=_t(t);r!==t&&this.d(It(e,r))}},e.prototype.dirty=function(e,t){this.d&&this.d.dirty(It(e,t))},e}();function It(e,t){return t+"#"+e}!function(e){var t=function(e){function t(t){var r=t.policies,n=t.resultCaching,i=void 0===n||n,o=t.seed,a=e.call(this,r,new Dt(i))||this;return a.storageTrie=new Be(ce),a.sharedLayerGroup=new Dt(i),o&&a.replace(o),a}return f(t,e),t.prototype.addLayer=function(e,t){return new Ft(e,this,t,this.sharedLayerGroup)},t.prototype.removeLayer=function(){return this},t.prototype.getStorage=function(){return this.storageTrie.lookupArray(arguments)},t}(e);e.Root=t}(Ct||(Ct={}));var Ft=function(e){function t(t,r,n,i){var o=e.call(this,r.policies,i)||this;return o.id=t,o.parent=r,o.replay=n,o.group=i,n(o),o}return f(t,e),t.prototype.addLayer=function(e,r){return new t(e,this,r,this.group)},t.prototype.removeLayer=function(e){var t=this,r=this.parent.removeLayer(e);return e===this.id?(this.group.caching&&Object.keys(this.data).forEach((function(e){t.data[e]!==r.lookup(e)&&t.delete(e)})),r):r===this.parent?this:r.addLayer(this.id,this.replay)},t.prototype.toObject=function(){return p(p({},this.parent.toObject()),this.data)},t.prototype.findChildRefIds=function(t){var r=this.parent.findChildRefIds(t);return Et.call(this.data,t)?p(p({},r),e.prototype.findChildRefIds.call(this,t)):r},t.prototype.getStorage=function(){for(var e=this.parent;e.parent;)e=e.parent;return e.getStorage.apply(e,arguments)},t}(Ct);function At(e,t,r){var n=e[r],i=t[r];return _e(n,i)?n:i}function Qt(e){return!!(e instanceof Ct&&e.group.caching)}function Nt(e,t){return new xt(e.message,t.path.slice(),t.query,t.clientOnly,t.variables)}var Vt=function(){function e(e){var t=this;this.config=e,this.executeSelectionSet=St((function(e){return t.execSelectionSetImpl(e)}),{keyArgs:function(e){return[e.selectionSet,e.objectOrReference,e.context]},makeCacheKey:function(e,t,r){if(Qt(r.store))return r.store.makeCacheKey(e,q(t)?t.__ref:t,r.varString)}}),this.knownResults=new WeakMap,this.executeSubSelectedArray=St((function(e){return t.execSubSelectedArrayImpl(e)}),{makeCacheKey:function(e){var t=e.field,r=e.array,n=e.context;if(Qt(n.store))return n.store.makeCacheKey(t,r,n.varString)}}),this.config=p({addTypename:!0},e)}return e.prototype.diffQueryAgainstStore=function(e){var t,r=e.store,n=e.query,i=e.rootId,o=void 0===i?"ROOT_QUERY":i,a=e.variables,s=e.returnPartialData,u=void 0===s||s,c=this.config.cache.policies;a=p(p({},z((w((t=Q(n))&&"query"===t.operation,"Must contain a query definition."),t))),a);var l=this.executeSelectionSet({selectionSet:V(n).selectionSet,objectOrReference:M(o),context:{store:r,query:n,policies:c,variables:a,varString:JSON.stringify(a),fragmentMap:_(N(n)),path:[],clientOnly:!1}}),f=l.missing&&l.missing.length>0;if(f&&!u)throw l.missing[0];return{result:l.result,missing:l.missing,complete:!f}},e.prototype.isFresh=function(e,t,r,n){if(Qt(n.store)&&this.knownResults.get(e)===r){var i=this.executeSelectionSet.peek(r,t,n);if(i&&e===i.result)return!0}return!1},e.prototype.execSelectionSetImpl=function(e){var t=this,r=e.selectionSet,n=e.objectOrReference,i=e.context;if(q(n)&&!i.policies.rootTypenamesById[n.__ref]&&!i.store.has(n.__ref))return{result:{},missing:[Nt(new m("Dangling reference to missing "+n.__ref+" object"),i)]};var o=i.variables,a=i.policies,s=i.store,u=[],c={result:null},l=s.getFieldValue(n,"__typename");function f(){return c.missing||(c.missing=[])}function p(e){var t;return e.missing&&(t=f()).push.apply(t,e.missing),e.result}this.config.addTypename&&"string"==typeof l&&!a.rootIdsByTypename[l]&&u.push({__typename:l});var h=new Set(r.selections);return h.forEach((function(e){var r;if(x(e,o))if(F(e)){var s=a.readField({fieldName:e.name.value,field:e,variables:i.variables,from:n},i),c=D(e);i.path.push(c);var d=i.clientOnly;i.clientOnly=d||!(!e.directives||!e.directives.some((function(e){return"client"===e.name.value}))),void 0===s?B.added(e)||f().push(Nt(new m("Can't find field '"+e.name.value+"' on "+(q(n)?n.__ref+" object":"object "+JSON.stringify(n,null,2))),i)):Array.isArray(s)?s=p(t.executeSubSelectedArray({field:e,array:s,context:i})):e.selectionSet?null!=s&&(s=p(t.executeSelectionSet({selectionSet:e.selectionSet,objectOrReference:s,context:i}))):(zt(i.store,e,s),ie(s)),void 0!==s&&u.push(((r={})[c]=s,r)),i.clientOnly=d,w(i.path.pop()===c)}else{var y=R(e,i.fragmentMap);y&&a.fragmentMatches(y,l)&&y.selectionSet.selections.forEach(h.add,h)}})),c.result=function(e){var t=e[0]||{},r=e.length;if(r>1)for(var n=new G,i=1;i<r;++i)t=n.merge(t,e[i]);return t}(u),Object.freeze(c.result),this.knownResults.set(c.result,r),c},e.prototype.execSubSelectedArrayImpl=function(e){var t,r=this,n=e.field,i=e.array,o=e.context;function a(e,r){return e.missing&&(t=t||[]).push.apply(t,e.missing),w(o.path.pop()===r),e.result}return n.selectionSet&&(i=i.filter(o.store.canRead)),i=i.map((function(e,t){return null===e?null:(o.path.push(t),Array.isArray(e)?a(r.executeSubSelectedArray({field:n,array:e,context:o}),t):n.selectionSet?a(r.executeSelectionSet({selectionSet:n.selectionSet,objectOrReference:e,context:o}),t):(zt(o.store,n,e),w(o.path.pop()===t),e))})),Object.freeze(i),{result:i,missing:t}},e}();function zt(e,t,r){if(!t.selectionSet){var n=new Set([r]);n.forEach((function(r){r&&"object"==typeof r&&(w(!q(r),"Missing selection set for object of type "+function(e,t){return q(t)?e.get(t.__ref,"__typename"):t&&t.__typename}(e,r)+" returned for query field "+t.name.value),Object.values(r).forEach(n.add,n))}))}}var Lt=function(){function e(e,t){this.cache=e,this.reader=t}return e.prototype.writeToStore=function(e){var t=e.query,r=e.result,n=e.dataId,i=e.store,o=e.variables,a=Q(t),s=new G;o=p(p({},z(a)),o);var u=this.processSelectionSet({result:r||Object.create(null),dataId:n,selectionSet:a.selectionSet,mergeTree:{map:new Map},context:{store:i,written:Object.create(null),merge:function(e,t){return s.merge(e,t)},variables:o,varString:JSON.stringify(o),fragmentMap:_(N(t))}});if(!q(u))throw new m("Could not identify object "+JSON.stringify(r));return i.retain(u.__ref),u},e.prototype.processSelectionSet=function(e){var t=this,r=e.dataId,n=e.result,i=e.selectionSet,o=e.context,a=e.mergeTree,s=this.cache.policies,u=s.identify(n,i,o.fragmentMap),c=u[0],l=u[1];if("string"==typeof(r=r||c)){var f=o.written[r]||(o.written[r]=[]),p=M(r);if(f.indexOf(i)>=0)return p;if(f.push(i),this.reader&&this.reader.isFresh(n,p,i,o))return p}var h=Object.create(null);l&&(h=o.merge(h,l));var d=r&&s.rootTypenamesById[r]||I(n,i,o.fragmentMap)||r&&o.store.get(r,"__typename");"string"==typeof d&&(h.__typename=d);var y=new Set(i.selections);if(y.forEach((function(e){var r;if(x(e,o.variables))if(F(e)){var i=D(e),u=n[i];if(void 0!==u){var c=s.getStoreFieldName({typename:d,fieldName:e.name.value,field:e,variables:o.variables}),l=Wt(a,c),f=t.processFieldValue(u,e,o,l),p=e.selectionSet&&o.store.getFieldValue(f,"__typename")||void 0,v=s.getMergeFunction(d,e.name.value,p);v?l.info={field:e,typename:d,merge:v}:Jt(a,c),h=o.merge(h,((r={})[c]=f,r))}else if(s.usingPossibleTypes&&!E(["defer","client"],e))throw new m("Missing field '"+i+"' in "+JSON.stringify(n,null,2).substring(0,100))}else{var b=R(e,o.fragmentMap);b&&s.fragmentMatches(b,d,n,o.variables)&&b.selectionSet.selections.forEach(y.add,y)}})),"string"==typeof r){var v=M(r);a.map.size&&(h=this.applyMerges(a,v,h,o));var b=new Set;y.forEach((function(e){F(e)&&e.selectionSet&&b.add(e.name.value)}));return Object.keys(h).forEach((function(e){(function(e){return b.has(_t(e))})(e)&&!function(e){var t=a.map.get(e);return Boolean(t&&t.info&&t.info.merge)}(e)&&function(e,t,r,n){var i=function(e){var t=n.getFieldValue(e,r);return"object"==typeof t&&t},o=i(e);if(!o)return;var a=i(t);if(!a)return;if(q(o))return;if(_e(o,a))return;if(Object.keys(o).every((function(e){return void 0!==n.getFieldValue(a,e)})))return;var s=n.getFieldValue(e,"__typename")||n.getFieldValue(t,"__typename"),u=_t(r),c=s+"."+u;if(Ut.has(c))return;Ut.add(c);var l=[];Array.isArray(o)||Array.isArray(a)||[o,a].forEach((function(e){var t=n.getFieldValue(e,"__typename");"string"!=typeof t||l.includes(t)||l.push(t)}));w.warn("Cache data may be lost when replacing the "+u+" field of a "+s+" object.\n\nTo address this problem (which is not a bug in Apollo Client), "+(l.length?"either ensure all objects of type "+l.join(" and ")+" have an ID or a custom merge function, or ":"")+"define a custom merge function for the "+c+" field, so InMemoryCache can safely merge these objects:\n\n  existing: "+JSON.stringify(o).slice(0,1e3)+"\n  incoming: "+JSON.stringify(a).slice(0,1e3)+"\n\nFor more information about these options, please refer to the documentation:\n\n  * Ensuring entity objects have IDs: https://go.apollo.dev/c/generating-unique-identifiers\n  * Defining custom merge functions: https://go.apollo.dev/c/merging-non-normalized-objects\n")}(v,h,e,o.store)})),o.store.merge(r,h),v}return h},e.prototype.processFieldValue=function(e,t,r,n){var i=this;return t.selectionSet&&null!==e?Array.isArray(e)?e.map((function(e,o){var a=i.processFieldValue(e,t,r,Wt(n,o));return Jt(n,o),a})):this.processSelectionSet({result:e,selectionSet:t.selectionSet,context:r,mergeTree:n}):ee(e)},e.prototype.applyMerges=function(e,t,r,n,i){var o,a=this;if(e.map.size&&!q(r)){var s,u=Array.isArray(r)||!q(t)&&!Mt(t)?void 0:t,c=r;u&&!i&&(i=[q(u)?u.__ref:u]);var l=function(e,t){return Array.isArray(e)?"number"==typeof t?e[t]:void 0:n.store.getFieldValue(e,String(t))};e.map.forEach((function(e,t){i&&i.push(t);var r=l(u,t),o=l(c,t),f=a.applyMerges(e,r,o,n,i);f!==o&&(s=s||new Map).set(t,f),i&&w(i.pop()===t)})),s&&(r=Array.isArray(c)?c.slice(0):p({},c),s.forEach((function(e,t){r[t]=e})))}return e.info?this.cache.policies.runMergeFunction(t,r,e.info,n,i&&(o=n.store).getStorage.apply(o,i)):r},e}(),Bt=[];function Wt(e,t){var r=e.map;return r.has(t)||r.set(t,Bt.pop()||{map:new Map}),r.get(t)}function Jt(e,t){var r=e.map,n=r.get(t);!n||n.info||n.map.size||(Bt.push(n),r.delete(t))}var Ut=new Set;var Gt=new Ye,Kt=new WeakMap;function Yt(e){var t=Kt.get(e);return t||Kt.set(e,t={vars:new Set,dep:mt()}),t}function Ht(e){var t=new Set,r=new Set,n=function(o){if(arguments.length>0){if(e!==o){e=o,t.forEach((function(e){Yt(e).dep.dirty(n),$t(e)}));var a=Array.from(r);r.clear(),a.forEach((function(t){return t(e)}))}}else{var s=Gt.getValue();s&&(i(s),Yt(s).dep(n))}return e};n.onNextChange=function(e){return r.add(e),function(){r.delete(e)}};var i=n.attachCache=function(e){return t.add(e),Yt(e).vars.add(n),n};return n.forgetCache=function(e){return t.delete(e)},n}function $t(e){e.broadcastWatches&&e.broadcastWatches()}function Zt(e){return void 0!==e.args?e.args:e.field?function(e,t){if(e.arguments&&e.arguments.length){var r={};return e.arguments.forEach((function(e){var n=e.name,i=e.value;return T(r,n,i,t)})),r}return null}(e.field,e.variables):null}var Xt=function(e,t){var r=e.__typename,n=e.id,i=e._id;if("string"==typeof r&&(t&&(t.keyObject=void 0!==n?{id:n}:void 0!==i?{_id:i}:void 0),void 0===n&&(n=i),void 0!==n))return r+":"+("number"==typeof n||"string"==typeof n?n:JSON.stringify(n))},er=function(){},tr=function(e,t){return t.fieldName},rr=function(e,t,r){return(0,r.mergeObjects)(e,t)},nr=function(e,t){return t},ir=function(){function e(e){this.config=e,this.typePolicies=Object.create(null),this.toBeAdded=Object.create(null),this.supertypeMap=new Map,this.fuzzySubtypes=new Map,this.rootIdsByTypename=Object.create(null),this.rootTypenamesById=Object.create(null),this.usingPossibleTypes=!1,this.config=p({dataIdFromObject:Xt},e),this.cache=this.config.cache,this.setRootTypename("Query"),this.setRootTypename("Mutation"),this.setRootTypename("Subscription"),e.possibleTypes&&this.addPossibleTypes(e.possibleTypes),e.typePolicies&&this.addTypePolicies(e.typePolicies)}return e.prototype.identify=function(e,t,r){var n=t&&r?I(e,t,r):e.__typename;if(n===this.rootTypenamesById.ROOT_QUERY)return["ROOT_QUERY"];for(var i,o={typename:n,selectionSet:t,fragmentMap:r},a=n&&this.getTypePolicy(n),s=a&&a.keyFn||this.config.dataIdFromObject;s;){var u=s(e,o);if(!Array.isArray(u)){i=u;break}s=ur(u)}return i=i?String(i):void 0,o.keyObject?[i,o.keyObject]:[i]},e.prototype.addTypePolicies=function(e){var t=this;Object.keys(e).forEach((function(r){var n=e[r],i=n.queryType,o=n.mutationType,a=n.subscriptionType,s=h(n,["queryType","mutationType","subscriptionType"]);i&&t.setRootTypename("Query",r),o&&t.setRootTypename("Mutation",r),a&&t.setRootTypename("Subscription",r),Et.call(t.toBeAdded,r)?t.toBeAdded[r].push(s):t.toBeAdded[r]=[s]}))},e.prototype.updateTypePolicy=function(e,t){var r=this,n=this.getTypePolicy(e),i=t.keyFields,o=t.fields;function a(e,t){e.merge="function"==typeof t?t:!0===t?rr:!1===t?nr:e.merge}a(n,t.merge),n.keyFn=!1===i?er:Array.isArray(i)?ur(i):"function"==typeof i?i:n.keyFn,o&&Object.keys(o).forEach((function(t){var n=r.getFieldPolicy(e,t,!0),i=o[t];if("function"==typeof i)n.read=i;else{var s=i.keyArgs,u=i.read,c=i.merge;n.keyFn=!1===s?tr:Array.isArray(s)?sr(s):"function"==typeof s?s:n.keyFn,"function"==typeof u&&(n.read=u),a(n,c)}n.read&&n.merge&&(n.keyFn=n.keyFn||tr)}))},e.prototype.setRootTypename=function(e,t){void 0===t&&(t=e);var r="ROOT_"+e.toUpperCase(),n=this.rootTypenamesById[r];t!==n&&(w(!n||n===e,"Cannot change root "+e+" __typename more than once"),n&&delete this.rootIdsByTypename[n],this.rootIdsByTypename[t]=r,this.rootTypenamesById[r]=t)},e.prototype.addPossibleTypes=function(e){var t=this;this.usingPossibleTypes=!0,Object.keys(e).forEach((function(r){t.getSupertypeSet(r,!0),e[r].forEach((function(e){t.getSupertypeSet(e,!0).add(r);var n=e.match(jt);n&&n[0]===e||t.fuzzySubtypes.set(e,new RegExp(e))}))}))},e.prototype.getTypePolicy=function(e){var t=this;if(!Et.call(this.typePolicies,e)){var r=this.typePolicies[e]=Object.create(null);r.fields=Object.create(null);var n=this.supertypeMap.get(e);n&&n.size&&n.forEach((function(e){var n=t.getTypePolicy(e),i=n.fields,o=h(n,["fields"]);Object.assign(r,o),Object.assign(r.fields,i)}))}var i=this.toBeAdded[e];return i&&i.length&&this.updateTypePolicy(e,le.apply(void 0,i.splice(0))),this.typePolicies[e]},e.prototype.getFieldPolicy=function(e,t,r){if(e){var n=this.getTypePolicy(e).fields;return n[t]||r&&(n[t]=Object.create(null))}},e.prototype.getSupertypeSet=function(e,t){var r=this.supertypeMap.get(e);return!r&&t&&this.supertypeMap.set(e,r=new Set),r},e.prototype.fragmentMatches=function(e,t,r,n){var i=this;if(!e.typeCondition)return!0;if(!t)return!1;var o=e.typeCondition.name.value;if(t===o)return!0;if(this.usingPossibleTypes&&this.supertypeMap.has(o))for(var a=this.getSupertypeSet(t,!0),s=[a],u=function(e){var t=i.getSupertypeSet(e,!1);t&&t.size&&s.indexOf(t)<0&&s.push(t)},c=!(!r||!this.fuzzySubtypes.size),l=!1,f=0;f<s.length;++f){var p=s[f];if(p.has(o))return a.has(o)||(l&&w.warn("Inferring subtype "+t+" of supertype "+o),a.add(o)),!0;p.forEach(u),c&&f===s.length-1&&Rt(e.selectionSet,r,n)&&(c=!1,l=!0,this.fuzzySubtypes.forEach((function(e,r){var n=t.match(e);n&&n[0]===t&&u(r)})))}return!1},e.prototype.hasKeyArgs=function(e,t){var r=this.getFieldPolicy(e,t,!1);return!(!r||!r.keyFn)},e.prototype.getStoreFieldName=function(e){var t,r=e.typename,n=e.fieldName,i=this.getFieldPolicy(r,n,!1),o=i&&i.keyFn;if(o&&r)for(var a={typename:r,fieldName:n,field:e.field||null,variables:e.variables},s=Zt(e);o;){var u=o(s,a);if(!Array.isArray(u)){t=u||n;break}o=sr(u)}return void 0===t&&(t=e.field?function(e,t){var r=null;e.directives&&(r={},e.directives.forEach((function(e){r[e.name.value]={},e.arguments&&e.arguments.forEach((function(n){var i=n.name,o=n.value;return T(r[e.name.value],i,o,t)}))})));var n=null;return e.arguments&&e.arguments.length&&(n={},e.arguments.forEach((function(e){var r=e.name,i=e.value;return T(n,r,i,t)}))),C(e.name.value,n,r)}(e.field,e.variables):C(n,Zt(e))),!1===t?n:n===_t(t)?t:n+":"+t},e.prototype.readField=function(e,t){var r=e.from;if(r&&(e.field||e.fieldName)){if(void 0===e.typename){var n=t.store.getFieldValue(r,"__typename");n&&(e.typename=n)}var i=this.getStoreFieldName(e),o=_t(i),a=t.store.getFieldValue(r,i),s=this.getFieldPolicy(e.typename,o,!1),u=s&&s.read;if(u){var c=or(this,r,e,t,t.store.getStorage(q(r)?r.__ref:r,i));return Gt.withValue(this.cache,u,[a,c])}return a}},e.prototype.getMergeFunction=function(e,t,r){var n=this.getFieldPolicy(e,t,!1),i=n&&n.merge;return!i&&r&&(i=(n=this.getTypePolicy(r))&&n.merge),i},e.prototype.runMergeFunction=function(e,t,r,n,i){var o=r.field,a=r.typename,s=r.merge;return s===rr?ar(n.store.getFieldValue)(e,t):s===nr?t:s(e,t,or(this,void 0,{typename:a,fieldName:o.name.value,field:o,variables:n.variables},n,i||Object.create(null)))},e}();function or(e,t,r,n,i){var o=e.getStoreFieldName(r),a=_t(o),s=r.variables||n.variables,u=n.store,c=u.getFieldValue,l=u.toReference,f=u.canRead;return{args:Zt(r),field:r.field||null,fieldName:a,storeFieldName:o,variables:s,isReference:q,toReference:l,storage:i,cache:e.cache,canRead:f,readField:function(r,i){var o="string"==typeof r?{fieldName:r,from:i}:p({},r);return void 0===o.from&&(o.from=t),void 0===o.variables&&(o.variables=s),e.readField(o,n)},mergeObjects:ar(c)}}function ar(e){return function(t,r){if(Array.isArray(t)||Array.isArray(r))throw new m("Cannot automatically merge arrays");if(t&&"object"==typeof t&&r&&"object"==typeof r){var n=e(t,"__typename"),i=e(r,"__typename");return!(n&&i&&n!==i)&&Mt(t)&&Mt(r)?p(p({},t),r):r}return r}}function sr(e){return function(t,r){return t?r.fieldName+":"+JSON.stringify(lr(t,e,!1)):r.fieldName}}function ur(e){var t=new Be(ce);return function(r,n){var i;if(n.selectionSet&&n.fragmentMap){var o=t.lookupArray([n.selectionSet,n.fragmentMap]);i=o.aliasMap||(o.aliasMap=cr(n.selectionSet,n.fragmentMap))}var a=n.keyObject=lr(r,e,!0,i);return n.typename+":"+JSON.stringify(a)}}function cr(e,t){var r=Object.create(null),n=new Set([e]);return n.forEach((function(e){e.selections.forEach((function(e){if(F(e)){if(e.alias){var i=e.alias.value,o=e.name.value;if(o!==i)(r.aliases||(r.aliases=Object.create(null)))[o]=i}if(e.selectionSet)(r.subsets||(r.subsets=Object.create(null)))[e.name.value]=cr(e.selectionSet,t)}else{var a=R(e,t);a&&n.add(a.selectionSet)}}))})),r}function lr(e,t,r,n){var i,o=Object.create(null);return t.forEach((function(t){if(Array.isArray(t)){if("string"==typeof i){var a=n&&n.subsets,s=a&&a[i];o[i]=lr(e[i],t,r,s)}}else{var u=n&&n.aliases,c=u&&u[t]||t;Et.call(e,c)?o[i=t]=e[c]:(w(!r,"Missing field '"+c+"' while computing key fields"),i=void 0)}})),o}var fr={dataIdFromObject:Xt,addTypename:!0,resultCaching:!0,typePolicies:{}};!function(e){function t(t){void 0===t&&(t={});var r=e.call(this)||this;return r.watches=new Set,r.typenameDocumentCache=new Map,r.makeVar=Ht,r.txCount=0,r.maybeBroadcastWatch=St((function(e,t){return r.broadcastWatch.call(r,e,!!t)}),{makeCacheKey:function(e){var t=e.optimistic?r.optimisticData:r.data;if(Qt(t)){var n=e.optimistic,i=e.rootId,o=e.variables;return t.makeCacheKey(e.query,e.callback,JSON.stringify({optimistic:n,rootId:i,variables:o}))}}}),r.watchDep=mt(),r.config=p(p({},fr),t),r.addTypename=!!r.config.addTypename,r.policies=new ir({cache:r,dataIdFromObject:r.config.dataIdFromObject,possibleTypes:r.config.possibleTypes,typePolicies:r.config.typePolicies}),r.data=new Ct.Root({policies:r.policies,resultCaching:r.config.resultCaching}),r.optimisticData=r.data,r.storeWriter=new Lt(r,r.storeReader=new Vt({cache:r,addTypename:r.addTypename})),r}f(t,e),t.prototype.restore=function(e){return e&&this.data.replace(e),this},t.prototype.extract=function(e){return void 0===e&&(e=!1),(e?this.optimisticData:this.data).extract()},t.prototype.read=function(e){var t=e.returnPartialData,r=void 0!==t&&t;try{return this.storeReader.diffQueryAgainstStore({store:e.optimistic?this.optimisticData:this.data,query:e.query,variables:e.variables,rootId:e.rootId,config:this.config,returnPartialData:r}).result||null}catch(e){if(e instanceof xt)return null;throw e}},t.prototype.write=function(e){try{return++this.txCount,this.storeWriter.writeToStore({store:this.data,query:e.query,result:e.result,dataId:e.dataId,variables:e.variables})}finally{--this.txCount||!1===e.broadcast||this.broadcastWatches()}},t.prototype.modify=function(e){if(Et.call(e,"id")&&!e.id)return!1;var t=e.optimistic?this.optimisticData:this.data;try{return++this.txCount,t.modify(e.id||"ROOT_QUERY",e.fields)}finally{--this.txCount||!1===e.broadcast||this.broadcastWatches()}},t.prototype.diff=function(e){return this.storeReader.diffQueryAgainstStore({store:e.optimistic?this.optimisticData:this.data,rootId:e.id||"ROOT_QUERY",query:e.query,variables:e.variables,returnPartialData:e.returnPartialData,config:this.config})},t.prototype.watch=function(e){var t=this;return this.watches.size||function(e){Yt(e).vars.forEach((function(t){return t.attachCache(e)}))}(this),this.watches.add(e),e.immediate&&this.maybeBroadcastWatch(e),function(){t.watches.delete(e)&&!t.watches.size&&function(e){Yt(e).vars.forEach((function(t){return t.forgetCache(e)}))}(t),t.watchDep.dirty(e),t.maybeBroadcastWatch.forget(e)}},t.prototype.gc=function(){return this.optimisticData.gc()},t.prototype.retain=function(e,t){return(t?this.optimisticData:this.data).retain(e)},t.prototype.release=function(e,t){return(t?this.optimisticData:this.data).release(e)},t.prototype.identify=function(e){return q(e)?e.__ref:this.policies.identify(e)[0]},t.prototype.evict=function(e){if(!e.id){if(Et.call(e,"id"))return!1;e=p(p({},e),{id:"ROOT_QUERY"})}try{return++this.txCount,this.optimisticData.evict(e)}finally{--this.txCount||!1===e.broadcast||this.broadcastWatches()}},t.prototype.reset=function(){return this.data.clear(),this.optimisticData=this.data,this.broadcastWatches(),Promise.resolve()},t.prototype.removeOptimistic=function(e){var t=this.optimisticData.removeLayer(e);t!==this.optimisticData&&(this.optimisticData=t,this.broadcastWatches())},t.prototype.performTransaction=function(e,t){var r=this,n=function(t){var n=r,i=n.data,o=n.optimisticData;++r.txCount,t&&(r.data=r.optimisticData=t);try{e(r)}finally{--r.txCount,r.data=i,r.optimisticData=o}},i=!1;"string"==typeof t?(this.optimisticData=this.optimisticData.addLayer(t,n),i=!0):null===t?n(this.data):n(),this.broadcastWatches(i)},t.prototype.transformDocument=function(e){if(this.addTypename){var t=this.typenameDocumentCache.get(e);return t||(t=B(e),this.typenameDocumentCache.set(e,t),this.typenameDocumentCache.set(t,t)),t}return e},t.prototype.broadcastWatches=function(e){var t=this;this.txCount||this.watches.forEach((function(r){return t.maybeBroadcastWatch(r,e)}))},t.prototype.broadcastWatch=function(e,t){this.watchDep.dirty(e),this.watchDep(e);var r=this.diff({query:e.query,variables:e.variables,optimistic:e.optimistic});e.optimistic&&t&&(r.fromOptimisticTransaction=!0),e.callback(r)}}(kt);
/*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
var pr=function(){return(pr=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},hr=new Map,dr=new Map,yr=!0,vr=!1;function br(e){return e.replace(/[\s,]+/g," ").trim()}function gr(e){var t=new Set,r=[];return e.definitions.forEach((function(e){if("FragmentDefinition"===e.kind){var n=e.name.value,i=br((a=e.loc).source.body.substring(a.start,a.end)),o=dr.get(n);o&&!o.has(i)?yr&&console.warn("Warning: fragment with name "+n+" already exists.\ngraphql-tag enforces all fragment names across your application to be unique; read more about\nthis in the docs: http://dev.apollodata.com/core/fragments.html#unique-names"):o||dr.set(n,o=new Set),o.add(i),t.has(i)||(t.add(i),r.push(e))}else r.push(e);var a})),pr(pr({},e),{definitions:r})}function mr(e){var r=br(e);if(!hr.has(r)){var n=t.parse(e,{experimentalFragmentVariables:vr});if(!n||"Document"!==n.kind)throw new Error("Not a valid GraphQL document.");hr.set(r,function(e){var t=new Set(e.definitions);t.forEach((function(e){e.loc&&delete e.loc,Object.keys(e).forEach((function(r){var n=e[r];n&&"object"==typeof n&&t.add(n)}))}));var r=e.loc;return r&&(delete r.startToken,delete r.endToken),e}(gr(n)))}return hr.get(r)}function wr(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];"string"==typeof e&&(e=[e]);var n=e[0];return t.forEach((function(t,r){t&&"Document"===t.kind?n+=t.loc.source.body:n+=t,n+=e[r+1]})),mr(n)}var Or,Sr=wr,kr=function(){hr.clear(),dr.clear()},xr=function(){yr=!1},Er=function(){vr=!0},jr=function(){vr=!1};(Or=wr||(wr={})).gql=Sr,Or.resetCaches=kr,Or.disableFragmentWarnings=xr,Or.enableExperimentalFragmentVariables=Er,Or.disableExperimentalFragmentVariables=jr,wr.default=wr;var _r,Rr=wr;_r="log",O[S],S=Math.max(0,O.indexOf(_r));var Mr,qr=new(ce?WeakMap:Map);!function(e){e[e.Query=0]="Query",e[e.Mutation=1]="Mutation",e[e.Subscription=2]="Subscription"}(Mr||(Mr={}));var Tr=new Map;function Pr(e){var t;switch(e){case Mr.Query:t="Query";break;case Mr.Mutation:t="Mutation";break;case Mr.Subscription:t="Subscription"}return t}var Cr=function(){function e(e,t){this.isMounted=!1,this.previousOptions={},this.context={},this.options={},this.options=e||{},this.context=t||{}}return e.prototype.getOptions=function(){return this.options},e.prototype.setOptions=function(e,t){void 0===t&&(t=!1),t&&!_e(this.options,e)&&(this.previousOptions=this.options),this.options=e},e.prototype.unmount=function(){this.isMounted=!1},e.prototype.refreshClient=function(){var e=this.options&&this.options.client||this.context&&this.context.client;w(!!e,'Could not find "client" in the context or passed in as an option. Wrap the root component in an <ApolloProvider>, or pass an ApolloClient instance in via options.');var t=!1;return e!==this.client&&(t=!0,this.client=e,this.cleanup()),{client:this.client,isNew:t}},e.prototype.verifyDocumentType=function(e,t){var r=function(e){var t,r,n=Tr.get(e);if(n)return n;w(!!e&&!!e.kind,"Argument of "+e+" passed to parser was not a valid GraphQL DocumentNode. You may need to use 'graphql-tag' or another method to convert your operation into a document");var i=e.definitions.filter((function(e){return"FragmentDefinition"===e.kind})),o=e.definitions.filter((function(e){return"OperationDefinition"===e.kind&&"query"===e.operation})),a=e.definitions.filter((function(e){return"OperationDefinition"===e.kind&&"mutation"===e.operation})),s=e.definitions.filter((function(e){return"OperationDefinition"===e.kind&&"subscription"===e.operation}));w(!i.length||o.length||a.length||s.length,"Passing only a fragment to 'graphql' is not yet supported. You must include a query, subscription or mutation as well"),w(o.length+a.length+s.length<=1,"react-apollo only supports a query, subscription, or a mutation per HOC. "+e+" had "+o.length+" queries, "+s.length+" subscriptions and "+a.length+" mutations. You can use 'compose' to join multiple operation types to a component"),r=o.length?Mr.Query:Mr.Mutation,o.length||a.length||(r=Mr.Subscription);var u=o.length?o:a.length?a:s;w(1===u.length,"react-apollo only supports one definition per HOC. "+e+" had "+u.length+" definitions. You can use 'compose' to join multiple operation types to a component");var c=u[0];t=c.variableDefinitions||[];var l={name:c.name&&"Name"===c.name.kind?c.name.value:"data",type:r,variables:t};return Tr.set(e,l),l}(e),n=Pr(t),i=Pr(r.type);w(r.type===t,"Running a "+n+" requires a graphql "+n+", but a "+i+" was used instead.")},e}();!function(e){function t(t){var r=t.options,n=t.context,i=t.setResult,o=e.call(this,r,n)||this;return o.currentObservable={},o.setResult=i,o.initialize(r),o}f(t,e),t.prototype.execute=function(e){if(!0===this.getOptions().skip)return this.cleanup(),{loading:!1,error:void 0,data:void 0,variables:this.getOptions().variables};var t=e;this.refreshClient().isNew&&(t=this.getLoadingResult());var r=this.getOptions().shouldResubscribe;return"function"==typeof r&&(r=!!r(this.getOptions())),!1!==r&&this.previousOptions&&Object.keys(this.previousOptions).length>0&&(this.previousOptions.subscription!==this.getOptions().subscription||!_e(this.previousOptions.variables,this.getOptions().variables)||this.previousOptions.skip!==this.getOptions().skip)&&(this.cleanup(),t=this.getLoadingResult()),this.initialize(this.getOptions()),this.startSubscription(),this.previousOptions=this.getOptions(),p(p({},t),{variables:this.getOptions().variables})},t.prototype.afterExecute=function(){this.isMounted=!0},t.prototype.cleanup=function(){this.endSubscription(),delete this.currentObservable.query},t.prototype.initialize=function(e){this.currentObservable.query||!0===this.getOptions().skip||(this.currentObservable.query=this.refreshClient().client.subscribe({query:e.subscription,variables:e.variables,fetchPolicy:e.fetchPolicy,context:e.context}))},t.prototype.startSubscription=function(){this.currentObservable.subscription||(this.currentObservable.subscription=this.currentObservable.query.subscribe({next:this.updateCurrentData.bind(this),error:this.updateError.bind(this),complete:this.completeSubscription.bind(this)}))},t.prototype.getLoadingResult=function(){return{loading:!0,error:void 0,data:void 0}},t.prototype.updateResult=function(e){this.isMounted&&this.setResult(e)},t.prototype.updateCurrentData=function(e){var t=this.getOptions().onSubscriptionData;this.updateResult({data:e.data,loading:!1,error:void 0}),t&&t({client:this.refreshClient().client,subscriptionData:e})},t.prototype.updateError=function(e){this.updateResult({error:e,loading:!1})},t.prototype.completeSubscription=function(){var e=this;Promise.resolve().then((function(){var t=e.getOptions().onSubscriptionComplete;t&&t(),e.endSubscription()}))},t.prototype.endSubscription=function(){this.currentObservable.subscription&&(this.currentObservable.subscription.unsubscribe(),delete this.currentObservable.subscription)}}(Cr);var Dr=function(e){function t(t){var r=t.options,n=t.context,i=t.result,o=t.setResult,a=e.call(this,r,n)||this;return a.runMutation=function(e){void 0===e&&(e={}),a.onMutationStart();var t=a.generateNewMutationId();return a.mutate(e).then((function(e){return a.onMutationCompleted(e,t),e})).catch((function(e){var r=a.getOptions().onError;if(a.onMutationError(e,t),r)return r(e),{data:void 0,errors:e};throw e}))},a.verifyDocumentType(r.mutation,Mr.Mutation),a.result=i,a.setResult=o,a.mostRecentMutationId=0,a}return f(t,e),t.prototype.execute=function(e){return this.isMounted=!0,this.verifyDocumentType(this.getOptions().mutation,Mr.Mutation),[this.runMutation,p(p({},e),{client:this.refreshClient().client})]},t.prototype.afterExecute=function(){return this.isMounted=!0,this.unmount.bind(this)},t.prototype.cleanup=function(){},t.prototype.mutate=function(e){return this.refreshClient().client.mutate(function(e,t){return le(e,t,t.variables&&{variables:p(p({},e.variables),t.variables)})}(this.getOptions(),e))},t.prototype.onMutationStart=function(){this.result.loading||this.getOptions().ignoreResults||this.updateResult({loading:!0,error:void 0,data:void 0,called:!0})},t.prototype.onMutationCompleted=function(e,t){var r=this.getOptions(),n=r.onCompleted,i=r.ignoreResults,o=e.data,a=e.errors,s=a&&a.length>0?new De({graphQLErrors:a}):void 0;this.isMostRecentMutation(t)&&!i&&this.updateResult({called:!0,loading:!1,data:o,error:s}),n&&n(o)},t.prototype.onMutationError=function(e,t){this.isMostRecentMutation(t)&&this.updateResult({loading:!1,error:e,data:void 0,called:!0})},t.prototype.generateNewMutationId=function(){return++this.mostRecentMutationId},t.prototype.isMostRecentMutation=function(e){return this.mostRecentMutationId===e},t.prototype.updateResult=function(e){if(this.isMounted&&(!this.previousResult||!_e(this.previousResult,e)))return this.setResult(e),this.previousResult=e,e},t}(Cr);function Ir(t,r){var n=e.useContext(function(){var e=qr.get(i.default.createContext);return e||((e=i.default.createContext({})).displayName="ApolloContext",qr.set(i.default.createContext,e)),e}()),o=e.useState({called:!1,loading:!1}),a=o[0],s=o[1],u=r?p(p({},r),{mutation:t}):{mutation:t},c=e.useRef();var l=(c.current||(c.current=new Dr({options:u,context:n,result:a,setResult:s})),c.current);return l.setOptions(u),l.context=n,e.useEffect((function(){return l.afterExecute()})),l.execute(a)}!function(e){function t(t){var r=t.options,n=t.context,i=t.onNewData,o=e.call(this,r,n)||this;return o.runLazy=!1,o.previous=Object.create(null),o.runLazyQuery=function(e){o.cleanup(),o.runLazy=!0,o.lazyOptions=e,o.onNewData()},o.getQueryResult=function(){var e=o.observableQueryFields(),t=o.getOptions();if(t.skip)e=p(p({},e),{data:void 0,error:void 0,loading:!1,networkStatus:Ce.ready,called:!0});else if(o.currentObservable){var r=o.currentObservable.getCurrentResult(),n=r.data,i=r.loading,a=r.partial,s=r.networkStatus,u=r.errors,c=r.error;if(u&&u.length>0&&(c=new De({graphQLErrors:u})),e=p(p({},e),{data:n,loading:i,networkStatus:s,error:c,called:!0}),i);else if(c)Object.assign(e,{data:(o.currentObservable.getLastResult()||{}).data});else{var l=o.currentObservable.options.fetchPolicy;if(t.partialRefetch&&a&&(!n||0===Object.keys(n).length)&&"cache-only"!==l)return Object.assign(e,{loading:!0,networkStatus:Ce.loading}),e.refetch(),e}}e.client=o.client,o.setOptions(t,!0);var f=o.previous.result;return o.previous.loading=f&&f.loading||!1,e.previousData=f&&(f.data||f.previousData),o.previous.result=e,o.currentObservable&&o.currentObservable.resetQueryStoreErrors(),e},o.obsRefetch=function(e){var t;return null===(t=o.currentObservable)||void 0===t?void 0:t.refetch(e)},o.obsFetchMore=function(e){return o.currentObservable.fetchMore(e)},o.obsUpdateQuery=function(e){return o.currentObservable.updateQuery(e)},o.obsStartPolling=function(e){var t;null===(t=o.currentObservable)||void 0===t||t.startPolling(e)},o.obsStopPolling=function(){var e;null===(e=o.currentObservable)||void 0===e||e.stopPolling()},o.obsSubscribeToMore=function(e){return o.currentObservable.subscribeToMore(e)},o.onNewData=i,o}f(t,e),t.prototype.execute=function(){this.refreshClient();var e=this.getOptions(),t=e.skip,r=e.query;return(t||r!==this.previous.query)&&(this.removeQuerySubscription(),this.removeObservable(!t),this.previous.query=r),this.updateObservableQuery(),this.isMounted&&this.startQuerySubscription(),this.getExecuteSsrResult()||this.getExecuteResult()},t.prototype.executeLazy=function(){return this.runLazy?[this.runLazyQuery,this.execute()]:[this.runLazyQuery,{loading:!1,networkStatus:Ce.ready,called:!1,data:void 0}]},t.prototype.fetchData=function(){var e=this,t=this.getOptions();return!t.skip&&!1!==t.ssr&&new Promise((function(t){return e.startQuerySubscription(t)}))},t.prototype.afterExecute=function(e){var t=(void 0===e?{}:e).lazy,r=void 0!==t&&t;return this.isMounted=!0,r&&!this.runLazy||this.handleErrorOrCompleted(),this.previousOptions=this.getOptions(),this.unmount.bind(this)},t.prototype.cleanup=function(){this.removeQuerySubscription(),this.removeObservable(!0),delete this.previous.result},t.prototype.getOptions=function(){var t=e.prototype.getOptions.call(this);return this.lazyOptions&&(t.variables=p(p({},t.variables),this.lazyOptions.variables),t.context=p(p({},t.context),this.lazyOptions.context)),this.runLazy&&delete t.skip,t},t.prototype.ssrInitiated=function(){return this.context&&this.context.renderPromises},t.prototype.getExecuteResult=function(){var e=this.getQueryResult();return this.startQuerySubscription(),e},t.prototype.getExecuteSsrResult=function(){var e=this.getOptions(),t=e.ssr,r=e.skip,n=!1===t,i=this.refreshClient().client.disableNetworkFetches,o=p({loading:!0,networkStatus:Ce.loading,called:!0,data:void 0,stale:!1,client:this.client},this.observableQueryFields());if(n&&(this.ssrInitiated()||i))return this.previous.result=o,o;if(this.ssrInitiated()){var a=this.getQueryResult()||o;return a.loading&&!r&&this.context.renderPromises.addQueryPromise(this,(function(){return null})),a}},t.prototype.prepareObservableQueryOptions=function(){var e=this.getOptions();this.verifyDocumentType(e.query,Mr.Query);var t=e.displayName||"Query";return!this.ssrInitiated()||"network-only"!==e.fetchPolicy&&"cache-and-network"!==e.fetchPolicy||(e.fetchPolicy="cache-first"),p(p({},e),{displayName:t,context:e.context})},t.prototype.initializeObservableQuery=function(){if(this.ssrInitiated()&&(this.currentObservable=this.context.renderPromises.getSSRObservable(this.getOptions())),!this.currentObservable){var e=this.prepareObservableQueryOptions();this.previous.observableQueryOptions=p(p({},e),{children:null}),this.currentObservable=this.refreshClient().client.watchQuery(p({},e)),this.ssrInitiated()&&this.context.renderPromises.registerSSRObservable(this.currentObservable,e)}},t.prototype.updateObservableQuery=function(){if(this.currentObservable){if(!this.getOptions().skip){var e=p(p({},this.prepareObservableQueryOptions()),{children:null});_e(e,this.previous.observableQueryOptions)||(this.previous.observableQueryOptions=e,this.currentObservable.setOptions(e).catch((function(){})))}}else this.initializeObservableQuery()},t.prototype.startQuerySubscription=function(e){var t=this;void 0===e&&(e=this.onNewData),this.currentSubscription||this.getOptions().skip||(this.currentSubscription=this.currentObservable.subscribe({next:function(r){var n=r.loading,i=r.networkStatus,o=r.data,a=t.previous.result;a&&a.loading===n&&a.networkStatus===i&&_e(a.data,o)||e()},error:function(r){if(t.resubscribeToQuery(),!r.hasOwnProperty("graphQLErrors"))throw r;var n=t.previous.result;(n&&n.loading||!_e(r,t.previous.error))&&(t.previous.error=r,e())}}))},t.prototype.resubscribeToQuery=function(){this.removeQuerySubscription();var e=this.currentObservable;if(e){var t=e.getLastError(),r=e.getLastResult();e.resetLastResults(),this.startQuerySubscription(),Object.assign(e,{lastError:t,lastResult:r})}},t.prototype.handleErrorOrCompleted=function(){if(this.currentObservable&&this.previous.result){var e=this.previous.result,t=e.data,r=e.loading,n=e.error;if(!r){var i=this.getOptions(),o=i.query,a=i.variables,s=i.onCompleted,u=i.onError,c=i.skip;if(this.previousOptions&&!this.previous.loading&&_e(this.previousOptions.query,o)&&_e(this.previousOptions.variables,a))return;!s||n||c?u&&n&&u(n):s(t)}}},t.prototype.removeQuerySubscription=function(){this.currentSubscription&&(this.currentSubscription.unsubscribe(),delete this.currentSubscription)},t.prototype.removeObservable=function(e){this.currentObservable&&(this.currentObservable.tearDownQuery(),e&&delete this.currentObservable)},t.prototype.observableQueryFields=function(){var e;return{variables:null===(e=this.currentObservable)||void 0===e?void 0:e.variables,refetch:this.obsRefetch,fetchMore:this.obsFetchMore,updateQuery:this.obsUpdateQuery,startPolling:this.obsStartPolling,stopPolling:this.obsStopPolling,subscribeToMore:this.obsSubscribeToMore}}}(Cr);const Fr=Rr`
  mutation contact($input: ContactInput!) {
    contact(input: $input) {
      success
    }
  }
`;return{...a,...u,...c,...{useSubmitContact:()=>{const[t,{data:r,error:n,loading:i}]=Ir(Fr);e.useEffect((()=>{n&&o.default(n.message),r&&r.contact&&o.default("Message sent!")}),[n,r]);return[async e=>{console.log("useSubmitContact.js"),await t({variables:{input:e}})},{data:r,error:n,loading:i}]}},...{Button:()=>i.default.createElement(s.Consumer,null,((e,t)=>(console.log("value",e,t),i.default.createElement("button",{type:"button"},"My Button"))))}}}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
